This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
Dockerfile
eslint.config.js
index.html
package.json
public/vite.svg
README.md
src/App.css
src/App.tsx
src/assets/react.svg
src/components/layout/ProtectedLayout.tsx
src/context/AppContext.tsx
src/index.css
src/locales/en/translation.json
src/locales/es/translation.json
src/locales/i18n.ts
src/locales/pt/translation.json
src/main.tsx
src/pages/Assets.tsx
src/pages/Dashboard.tsx
src/pages/ForgotPassword.tsx
src/pages/Login.tsx
src/pages/MaintenanceRecords.tsx
src/pages/MaintenanceSchedules.tsx
src/pages/MaintenanceTypes.tsx
src/pages/Register.tsx
src/pages/ResetPassword.tsx
src/services/api.ts
src/theme/index.ts
src/types/index.ts
src/vite-env.d.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="Dockerfile">
FROM node:20-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

RUN npm run build

EXPOSE 3000

# CORREÇÃO: Use vite preview com --host 0.0.0.0 e --port 3000
CMD ["npx", "vite", "preview", "--host", "0.0.0.0", "--port", "3000"]
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.16.0",
    "@mui/material": "^5.16.0",
    "axios": "^1.9.0",
    "i18next": "^25.2.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-i18next": "^15.5.1",
    "react-router-dom": "^7.6.0",
    "recharts": "^2.8.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.25.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.4.1",
    "eslint": "^9.25.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "typescript": "~5.8.3",
    "vite": "^6.3.5"
  }
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
  width: 100%;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}

.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}

.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.tsx">
// frontend/src/App.tsx
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Box } from '@mui/material';

// Páginas de autenticação
import Login from './pages/Login';
import Register from './pages/Register';
import ForgotPassword from './pages/ForgotPassword';
import ResetPassword from './pages/ResetPassword';

// Páginas protegidas
import Dashboard from './pages/Dashboard';
import Assets from './pages/Assets';
import MaintenanceTypes from './pages/MaintenanceTypes';
import MaintenanceRecords from './pages/MaintenanceRecords';
import MaintenanceSchedules from './pages/MaintenanceSchedules';

// Componente de layout protegido
import ProtectedLayout from './components/layout/ProtectedLayout';

// Componentes temporários para páginas que não existem ainda
const ComingSoon = ({ pageName }: { pageName: string }) => (
  <Box sx={{ p: 3, textAlign: 'center' }}>
    <h2>{pageName}</h2>
    <p>Esta página será implementada em breve...</p>
  </Box>
);

function App() {


  return (
    <Box
      sx={{
        bgcolor: 'background.default',
        color: 'text.primary',
        minHeight: '100vh',
        minWidth: '100vw',
      }}
    >
      <Router>
        <Routes>
          {/* Rotas públicas de autenticação */}
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/forgot-password" element={<ForgotPassword />} />
          <Route path="/reset-password/:token" element={<ResetPassword />} />

          {/* Rotas protegidas */}
          <Route path="/" element={<ProtectedLayout />}>
            <Route index element={<Dashboard />} />
            <Route path="assets" element={<Assets />} />
            <Route path="assets/:id" element={<ComingSoon pageName="Detalhes do Ativo" />} />
            <Route path="maintenance-types" element={<MaintenanceTypes />} />
            <Route path="maintenance-records" element={<MaintenanceRecords />} />
            <Route path="maintenance-schedules" element={<MaintenanceSchedules />} />
            <Route path="maintenance" element={<Navigate to="/maintenance-records" replace />} />
          </Route>

          {/* Rota padrão */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </Router>
    </Box>
  );
}

export default App;
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/layout/ProtectedLayout.tsx">
// frontend/src/components/layout/ProtectedLayout.tsx
import { useState, useContext } from 'react';
import { Outlet, Navigate, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import {
  AppBar, Box, Drawer, IconButton, Toolbar, Typography,
  List, ListItem, ListItemIcon, ListItemText, Divider,
  Menu, MenuItem, Button, useMediaQuery, useTheme, Collapse
} from '@mui/material';
import {
  Menu as MenuIcon, Dashboard, DirectionsCar, Build,
  Brightness4, Brightness7, Language, Logout, Settings,
  Schedule, Assignment, ExpandLess, ExpandMore
} from '@mui/icons-material';
import { AppContext } from '../../context/AppContext';

const drawerWidth = 240;

const ProtectedLayout = () => {
  const { t } = useTranslation();
  const { themeMode, toggleTheme, language, changeLanguage } = useContext(AppContext);
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [mobileOpen, setMobileOpen] = useState(false);
  const [languageMenu, setLanguageMenu] = useState<null | HTMLElement>(null);
  const [maintenanceOpen, setMaintenanceOpen] = useState(true);
  const location = useLocation();

  // Verificar se o usuário está autenticado
  const isAuthenticated = localStorage.getItem('token') !== null;

  if (!isAuthenticated) {
    // Redirecionar para login se não estiver autenticado
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const handleLanguageMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setLanguageMenu(event.currentTarget);
  };

  const handleLanguageMenuClose = () => {
    setLanguageMenu(null);
  };

  const handleLanguageChange = (lng: string) => {
    changeLanguage(lng);
    handleLanguageMenuClose();
  };

  const handleLogout = () => {
    localStorage.removeItem('token');
    window.location.href = '/login';
  };

  const menuItems = [
    { text: t('dashboard.title'), icon: <Dashboard />, path: '/' },
    { text: t('assets.title'), icon: <DirectionsCar />, path: '/assets' },
  ];

  const maintenanceItems = [
    { text: 'Tipos de Manutenção', icon: <Settings />, path: '/maintenance-types' },
    { text: 'Registros', icon: <Assignment />, path: '/maintenance-records' },
    { text: 'Agendamentos', icon: <Schedule />, path: '/maintenance-schedules' },
  ];

  const getPageTitle = (pathname: string) => {
    const item = menuItems.find(item => item.path === pathname);
    if (item) return item.text;

    const maintenanceItem = maintenanceItems.find(item => item.path === pathname);
    if (maintenanceItem) return maintenanceItem.text;

    return t('app.title');
  };

  const drawer = (
    <>
      <Toolbar>
        <Typography variant="h6" noWrap component="div">
          {t('app.title')}
        </Typography>
      </Toolbar>
      <Divider />
      <List>
        {menuItems.map((item) => (
          <ListItem
            button
            key={item.text}
            onClick={() => {
              window.location.href = item.path;
              if (isMobile) handleDrawerToggle();
            }}
            selected={location.pathname === item.path}
          >
            <ListItemIcon>{item.icon}</ListItemIcon>
            <ListItemText primary={item.text} />
          </ListItem>
        ))}

        {/* Menu de Manutenção */}
        <ListItem button onClick={() => setMaintenanceOpen(!maintenanceOpen)}>
          <ListItemIcon>
            <Build />
          </ListItemIcon>
          <ListItemText primary={t('maintenance.title')} />
          {maintenanceOpen ? <ExpandLess /> : <ExpandMore />}
        </ListItem>
        <Collapse in={maintenanceOpen} timeout="auto" unmountOnExit>
          <List component="div" disablePadding>
            {maintenanceItems.map((item) => (
              <ListItem
                button
                key={item.text}
                sx={{ pl: 4 }}
                onClick={() => {
                  window.location.href = item.path;
                  if (isMobile) handleDrawerToggle();
                }}
                selected={location.pathname === item.path}
              >
                <ListItemIcon>{item.icon}</ListItemIcon>
                <ListItemText primary={item.text} />
              </ListItem>
            ))}
          </List>
        </Collapse>
      </List>
    </>
  );

  return (
    <Box sx={{ display: 'flex' }}>
      <AppBar
        position="fixed"
        sx={{
          width: { sm: `calc(100% - ${drawerWidth}px)` },
          ml: { sm: `${drawerWidth}px` },
        }}
      >
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, display: { sm: 'none' } }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
            {getPageTitle(location.pathname)}
          </Typography>

          {/* Botão de alternância de tema */}
          <IconButton color="inherit" onClick={toggleTheme}>
            {themeMode === 'dark' ? <Brightness7 /> : <Brightness4 />}
          </IconButton>

          {/* Menu de idiomas */}
          <IconButton
            color="inherit"
            aria-controls="language-menu"
            aria-haspopup="true"
            onClick={handleLanguageMenuOpen}
          >
            <Language />
          </IconButton>
          <Menu
            id="language-menu"
            anchorEl={languageMenu}
            keepMounted
            open={Boolean(languageMenu)}
            onClose={handleLanguageMenuClose}
          >
            <MenuItem onClick={() => handleLanguageChange('pt')}>
              {t('app.language.pt')}
            </MenuItem>
            <MenuItem onClick={() => handleLanguageChange('en')}>
              {t('app.language.en')}
            </MenuItem>
            <MenuItem onClick={() => handleLanguageChange('es')}>
              {t('app.language.es')}
            </MenuItem>
          </Menu>

          {/* Botão de logout */}
          <Button
            color="inherit"
            onClick={handleLogout}
            startIcon={<Logout />}
          >
            {t('auth.logout')}
          </Button>
        </Toolbar>
      </AppBar>

      <Box
        component="nav"
        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}
      >
        {/* Drawer para dispositivos móveis */}
        <Drawer
          variant="temporary"
          open={mobileOpen}
          onClose={handleDrawerToggle}
          ModalProps={{
            keepMounted: true, // Melhor desempenho em dispositivos móveis
          }}
          sx={{
            display: { xs: 'block', sm: 'none' },
            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
          }}
        >
          {drawer}
        </Drawer>

        {/* Drawer para desktop */}
        <Drawer
          variant="permanent"
          sx={{
            display: { xs: 'none', sm: 'block' },
            '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },
          }}
          open
        >
          {drawer}
        </Drawer>
      </Box>

      {/* Conteúdo principal */}
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 3,
          width: { sm: `calc(100% - ${drawerWidth}px)` },
          mt: 8
        }}
      >
        <Outlet />
      </Box>
    </Box>
  );
};

export default ProtectedLayout;
</file>

<file path="src/context/AppContext.tsx">
import React, { createContext, useState, useEffect, useMemo } from 'react';
import type { ReactNode } from 'react';
import { ThemeProvider } from '@mui/material';
import type { PaletteMode } from '@mui/material';
import { getTheme } from '../theme';
import { useTranslation } from 'react-i18next';


interface AppContextType {
  themeMode: PaletteMode;
  toggleTheme: () => void;
  language: string;
  changeLanguage: (lng: string) => void;
}

export const AppContext = createContext<AppContextType>({
  themeMode: 'light',
  toggleTheme: () => { },
  language: 'pt',
  changeLanguage: () => { },
});

interface AppProviderProps {
  children: ReactNode;
}

export const AppProvider: React.FC<AppProviderProps> = ({ children }) => {
  const [themeMode, setThemeMode] = useState<PaletteMode>(
    (localStorage.getItem('themeMode') as PaletteMode) || 'light'
  );

  const { i18n } = useTranslation();

  const toggleTheme = () => {
    const newMode = themeMode === 'light' ? 'dark' : 'light';
    setThemeMode(newMode);
    localStorage.setItem('themeMode', newMode);
  };

  const changeLanguage = (lng: string) => {
    i18n.changeLanguage(lng);
    localStorage.setItem('language', lng);
  };

  useEffect(() => {
    // Inicializar com o tema salvo no localStorage
    const savedTheme = localStorage.getItem('themeMode') as PaletteMode;
    if (savedTheme) {
      setThemeMode(savedTheme);
    }

    // Inicializar com o idioma salvo no localStorage
    const savedLanguage = localStorage.getItem('language');
    if (savedLanguage) {
      i18n.changeLanguage(savedLanguage);
    }
  }, [i18n]);

  const theme = useMemo(() => getTheme(themeMode), [themeMode]);

  const contextValue = useMemo(
    () => ({
      themeMode,
      toggleTheme,
      language: i18n.language,
      changeLanguage,
    }),
    [themeMode, i18n.language]
  );

  return (
    <AppContext.Provider value={contextValue}>
      <ThemeProvider theme={theme}>
        {children}
      </ThemeProvider>
    </AppContext.Provider>
  );
};
</file>

<file path="src/index.css">
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
</file>

<file path="src/locales/en/translation.json">
{
  "app": {
    "title": "Asset Maintenance Assistant",
    "theme": {
      "light": "Light Theme",
      "dark": "Dark Theme"
    },
    "language": {
      "pt": "Portuguese",
      "en": "English",
      "es": "Spanish"
    }
  },
  "auth": {
    "login": "Login",
    "register": "Register",
    "logout": "Logout",
    "email": "Email",
    "password": "Password",
    "confirmPassword": "Confirm Password",
    "name": "Name",
    "forgotPassword": "Forgot Password?",
    "resetPassword": "Reset Password",
    "noAccount": "Don't have an account?",
    "hasAccount": "Already have an account?"
  },
  "dashboard": {
    "title": "Main Dashboard",
    "welcome": "Welcome back! Here's a summary of your assets and maintenance.",
    "upcomingMaintenance": "Upcoming Maintenance",
    "overdueMaintenance": "Overdue Maintenance",
    "assetCount": "Total Assets",
    "maintenanceCount": "Total Maintenance",
    "activeAssets": "Active Assets",
    "equipmentRegistered": "Equipment registered",
    "normalOperation": "In normal operation",
    "next7Days": "Next 7 days",
    "requiresAttention": "Requires immediate attention",
    "upcomingMaintenances": "Upcoming Maintenance",
    "pendingCount": "pending",
    "allUpToDate": "All maintenance is up to date!",
    "noScheduledMaintenance": "No maintenance scheduled for the coming days.",
    "seeAllMaintenances": "See All Maintenance",
    "assetDistribution": "Asset Distribution",
    "noAssetsYet": "No assets registered yet",
    "addFirstAsset": "Add First Asset",
    "maintenanceTrend": "Maintenance Trend",
    "trackPerformance": "Track your maintenance performance over time",
    "performed": "Performed",
    "scheduled": "Scheduled",
    "seeMaintenances": "See Maintenance",
    "addAsset": "Add Asset",
    "daysOverdue": "days overdue",
    "dueToday": "Due today",
    "daysRemaining": "days remaining",
    "completed": "Completed",
    "pending": "Pending",
    "dueDate": "Due date",
    "generalMaintenance": "General maintenance"
  },
  "assets": {
    "title": "My Assets",
    "add": "Add Asset",
    "edit": "Edit Asset",
    "delete": "Remove Asset",
    "name": "Name",
    "description": "Description",
    "location": "Location",
    "status": {
      "title": "Status",
      "active": "Active",
      "inactive": "Inactive",
      "maintenance": "Under Maintenance"
    },
    "noAssets": "No assets registered"
  },
  "maintenance": {
    "title": "Maintenance",
    "add": "Log Maintenance",
    "edit": "Edit Maintenance",
    "delete": "Remove Maintenance",
    "type": "Maintenance Type",
    "date": "Date",
    "notes": "Notes",
    "cost": "Cost",
    "nextDate": "Next Due Date",
    "frequency": {
      "title": "Frequency",
      "days": "Days",
      "weeks": "Weeks",
      "months": "Months",
      "kilometers": "Kilometers",
      "hours": "Usage Hours"
    },
    "status": {
      "title": "Status",
      "pending": "Pending",
      "completed": "Completed",
      "overdue": "Overdue"
    },
    "noRecords": "No maintenance records",
    "types": {
      "title": "Maintenance Types",
      "add": "Add Type",
      "edit": "Edit Type",
      "delete": "Remove Type",
      "name": "Name",
      "description": "Description",
      "isDefault": "Default Type"
    },
    "records": {
      "title": "Maintenance Records",
      "add": "Log Maintenance",
      "edit": "Edit Record",
      "delete": "Remove Record"
    },
    "schedules": {
      "title": "Schedules",
      "add": "New Schedule",
      "edit": "Edit Schedule",
      "delete": "Remove Schedule"
    }
  },
  "common": {
    "save": "Save",
    "cancel": "Cancel",
    "delete": "Delete",
    "edit": "Edit",
    "view": "View",
    "confirm": "Confirm",
    "back": "Back",
    "search": "Search",
    "loading": "Loading...",
    "success": "Success!",
    "error": "Error!",
    "required": "Required field"
  }
}
</file>

<file path="src/locales/es/translation.json">
{
  "app": {
    "title": "Asistente de Mantenimiento de Activos",
    "theme": {
      "light": "Tema Claro",
      "dark": "Tema Oscuro"
    },
    "language": {
      "pt": "Portugués",
      "en": "Inglés",
      "es": "Español"
    }
  },
  "auth": {
    "login": "Iniciar Sesión",
    "register": "Registrarse",
    "logout": "Cerrar Sesión",
    "email": "Correo Electrónico",
    "password": "Contraseña",
    "confirmPassword": "Confirmar Contraseña",
    "name": "Nombre",
    "forgotPassword": "¿Olvidaste tu contraseña?",
    "resetPassword": "Recuperar Contraseña",
    "noAccount": "¿No tienes una cuenta?",
    "hasAccount": "¿Ya tienes una cuenta?"
  },
  "dashboard": {
    "title": "Panel Principal",
    "welcome": "¡Bienvenido de vuelta! Aquí tienes un resumen de tus activos y mantenimientos.",
    "upcomingMaintenance": "Mantenimientos Próximos",
    "overdueMaintenance": "Mantenimientos Atrasados",
    "assetCount": "Total de Activos",
    "maintenanceCount": "Total de Mantenimientos",
    "activeAssets": "Activos Activos",
    "equipmentRegistered": "Equipos registrados",
    "normalOperation": "En operación normal",
    "next7Days": "Próximos 7 días",
    "requiresAttention": "Requiere atención inmediata",
    "upcomingMaintenances": "Próximos Mantenimientos",
    "pendingCount": "pendientes",
    "allUpToDate": "¡Todos los mantenimientos están al día!",
    "noScheduledMaintenance": "No hay mantenimientos programados para los próximos días.",
    "seeAllMaintenances": "Ver Todos los Mantenimientos",
    "assetDistribution": "Distribución de Activos",
    "noAssetsYet": "Ningún activo registrado aún",
    "addFirstAsset": "Agregar Primer Activo",
    "maintenanceTrend": "Tendencia de Mantenimientos",
    "trackPerformance": "Rastrea el rendimiento de tus mantenimientos a lo largo del tiempo",
    "performed": "Realizados",
    "scheduled": "Programados",
    "seeMaintenances": "Ver Mantenimientos",
    "addAsset": "Agregar Activo",
    "daysOverdue": "días atrasado",
    "dueToday": "Vence hoy",
    "daysRemaining": "días restantes",
    "completed": "Completado",
    "pending": "Pendiente",
    "dueDate": "Fecha de vencimiento",
    "generalMaintenance": "Mantenimiento general"
  },
  "assets": {
    "title": "Mis Activos",
    "add": "Agregar Activo",
    "edit": "Editar Activo",
    "delete": "Eliminar Activo",
    "name": "Nombre",
    "description": "Descripción",
    "location": "Ubicación",
    "status": {
      "title": "Estado",
      "active": "Activo",
      "inactive": "Inactivo",
      "maintenance": "En Mantenimiento"
    },
    "noAssets": "No hay activos registrados"
  },
  "maintenance": {
    "title": "Mantenimiento",
    "add": "Registrar Mantenimiento",
    "edit": "Editar Mantenimiento",
    "delete": "Eliminar Mantenimiento",
    "type": "Tipo de Mantenimiento",
    "date": "Fecha",
    "notes": "Notas",
    "cost": "Costo",
    "nextDate": "Próxima Fecha",
    "frequency": {
      "title": "Frecuencia",
      "days": "Días",
      "weeks": "Semanas",
      "months": "Meses",
      "kilometers": "Kilómetros",
      "hours": "Horas de Uso"
    },
    "status": {
      "title": "Estado",
      "pending": "Pendiente",
      "completed": "Completado",
      "overdue": "Atrasado"
    },
    "noRecords": "No hay registros de mantenimiento",
    "types": {
      "title": "Tipos de Mantenimiento",
      "add": "Agregar Tipo",
      "edit": "Editar Tipo",
      "delete": "Eliminar Tipo",
      "name": "Nombre",
      "description": "Descripción",
      "isDefault": "Tipo Predeterminado"
    },
    "records": {
      "title": "Registros de Mantenimiento",
      "add": "Registrar Mantenimiento",
      "edit": "Editar Registro",
      "delete": "Eliminar Registro"
    },
    "schedules": {
      "title": "Programaciones",
      "add": "Nueva Programación",
      "edit": "Editar Programación",
      "delete": "Eliminar Programación"
    }
  },
  "common": {
    "save": "Guardar",
    "cancel": "Cancelar",
    "delete": "Eliminar",
    "edit": "Editar",
    "view": "Ver",
    "confirm": "Confirmar",
    "back": "Volver",
    "search": "Buscar",
    "loading": "Cargando...",
    "success": "¡Éxito!",
    "error": "¡Error!",
    "required": "Campo requerido"
  }
}
</file>

<file path="src/locales/i18n.ts">
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

// Importar arquivos de tradução
import translationPT from './pt/translation.json';
import translationEN from './en/translation.json';
import translationES from './es/translation.json';

// Recursos de linguagem
const resources = {
  pt: {
    translation: translationPT
  },
  en: {
    translation: translationEN
  },
  es: {
    translation: translationES
  }
};

i18n
  .use(initReactI18next)
  .init({
    resources,
    lng: localStorage.getItem('language') || 'pt', // Idioma padrão
    fallbackLng: 'pt',
    interpolation: {
      escapeValue: false // React já faz escape
    }
  });

export default i18n;
</file>

<file path="src/locales/pt/translation.json">
{
  "app": {
    "title": "Assistente de Manutenção de Ativos",
    "theme": {
      "light": "Tema Claro",
      "dark": "Tema Escuro"
    },
    "language": {
      "pt": "Português",
      "en": "Inglês",
      "es": "Espanhol"
    }
  },
  "auth": {
    "login": "Entrar",
    "register": "Cadastrar",
    "logout": "Sair",
    "email": "E-mail",
    "password": "Senha",
    "confirmPassword": "Confirmar Senha",
    "name": "Nome",
    "forgotPassword": "Esqueceu a senha?",
    "resetPassword": "Recuperar Senha",
    "noAccount": "Não tem uma conta?",
    "hasAccount": "Já tem uma conta?"
  },
  "dashboard": {
    "title": "Painel Principal",
    "welcome": "Bem-vindo de volta! Aqui está um resumo dos seus ativos e manutenções.",
    "upcomingMaintenance": "Manutenções Próximas",
    "overdueMaintenance": "Manutenções Atrasadas",
    "assetCount": "Total de Ativos",
    "maintenanceCount": "Total de Manutenções",
    "activeAssets": "Ativos Ativos",
    "equipmentRegistered": "Equipamentos cadastrados",
    "normalOperation": "Em operação normal",
    "next7Days": "Próximos 7 dias",
    "requiresAttention": "Requer atenção imediata",
    "upcomingMaintenances": "Próximas Manutenções",
    "pendingCount": "pendentes",
    "allUpToDate": "Todas as manutenções estão em dia!",
    "noScheduledMaintenance": "Nenhuma manutenção programada para os próximos dias.",
    "seeAllMaintenances": "Ver Todas as Manutenções",
    "assetDistribution": "Distribuição de Ativos",
    "noAssetsYet": "Nenhum ativo cadastrado ainda",
    "addFirstAsset": "Adicionar Primeiro Ativo",
    "maintenanceTrend": "Tendência de Manutenções",
    "trackPerformance": "Acompanhe o desempenho das suas manutenções ao longo do tempo",
    "performed": "Realizadas",
    "scheduled": "Previstas",
    "seeMaintenances": "Ver Manutenções",
    "addAsset": "Adicionar Ativo",
    "daysOverdue": "dias atrasada",
    "dueToday": "Vence hoje",
    "daysRemaining": "dias restantes",
    "completed": "Concluída",
    "pending": "Pendente",
    "dueDate": "Vencimento",
    "generalMaintenance": "Manutenção geral"
  },
  "assets": {
    "title": "Meus Ativos",
    "add": "Adicionar Ativo",
    "edit": "Editar Ativo",
    "delete": "Remover Ativo",
    "name": "Nome",
    "description": "Descrição",
    "location": "Localização",
    "status": {
      "title": "Status",
      "active": "Ativo",
      "inactive": "Inativo",
      "maintenance": "Em Manutenção"
    },
    "noAssets": "Nenhum ativo cadastrado"
  },
  "maintenance": {
    "title": "Manutenções",
    "add": "Registrar Manutenção",
    "edit": "Editar Manutenção",
    "delete": "Remover Manutenção",
    "type": "Tipo de Manutenção",
    "date": "Data",
    "notes": "Observações",
    "cost": "Custo",
    "nextDate": "Próxima Data",
    "frequency": {
      "title": "Frequência",
      "days": "Dias",
      "weeks": "Semanas",
      "months": "Meses",
      "kilometers": "Quilômetros",
      "hours": "Horas de Uso"
    },
    "status": {
      "title": "Status",
      "pending": "Pendente",
      "completed": "Concluída",
      "overdue": "Atrasada"
    },
    "noRecords": "Nenhuma manutenção registrada",
    "types": {
      "title": "Tipos de Manutenção",
      "add": "Adicionar Tipo",
      "edit": "Editar Tipo",
      "delete": "Remover Tipo",
      "name": "Nome",
      "description": "Descrição",
      "isDefault": "Tipo Padrão"
    },
    "records": {
      "title": "Registros de Manutenção",
      "add": "Registrar Manutenção",
      "edit": "Editar Registro",
      "delete": "Remover Registro"
    },
    "schedules": {
      "title": "Agendamentos",
      "add": "Novo Agendamento",
      "edit": "Editar Agendamento",
      "delete": "Remover Agendamento"
    }
  },
  "common": {
    "save": "Salvar",
    "cancel": "Cancelar",
    "delete": "Excluir",
    "edit": "Editar",
    "view": "Visualizar",
    "confirm": "Confirmar",
    "back": "Voltar",
    "search": "Buscar",
    "loading": "Carregando...",
    "success": "Sucesso!",
    "error": "Erro!",
    "required": "Campo obrigatório"
  }
}
</file>

<file path="src/main.tsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { AppProvider } from './context/AppContext'
import './locales/i18n'
import { CssBaseline } from '@mui/material'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <AppProvider>
      <CssBaseline />
      <App />
    </AppProvider>
  </React.StrictMode>,
)
</file>

<file path="src/pages/Assets.tsx">
// frontend/src/pages/Assets.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Alert,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress
} from '@mui/material';
import { Add, Edit, Delete } from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import type { Asset, CreateAssetData, UpdateAssetData } from '../types';
import { assetService } from '../services/api';


const Assets: React.FC = () => {
  const { t } = useTranslation();

  // Estados
  const [assets, setAssets] = useState<Asset[]>([]);
  const [loading, setLoading] = useState(true);
  const [formOpen, setFormOpen] = useState(false);
  const [editingAsset, setEditingAsset] = useState<Asset | null>(null);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // Form data
  const [formData, setFormData] = useState<CreateAssetData>({
    name: '',
    description: '',
    location: '',
    status: 'active'
  });

  // Carregar ativos
  const loadAssets = async () => {
    try {
      setLoading(true);
      const response = await assetService.getAll();
      setAssets(response.assets);
      setError('');
    } catch (error: any) {
      console.error('Erro ao carregar ativos:', error);
      setError('Erro ao carregar ativos');
    } finally {
      setLoading(false);
    }
  };

  // Carregar ativos na montagem
  useEffect(() => {
    loadAssets();
  }, []);

  // Handlers do formulário
  const handleAddAsset = () => {
    setEditingAsset(null);
    setFormData({ name: '', description: '', location: '', status: 'active' });
    setFormOpen(true);
  };

  const handleEditAsset = (asset: Asset) => {
    setEditingAsset(asset);
    setFormData({
      name: asset.name,
      description: asset.description || '',
      location: asset.location || '',
      status: asset.status
    });
    setFormOpen(true);
  };

  const handleFormClose = () => {
    setFormOpen(false);
    setEditingAsset(null);
    setFormData({ name: '', description: '', location: '', status: 'active' });
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.name.trim()) {
      setError('Nome é obrigatório');
      return;
    }

    try {
      setSubmitting(true);
      setError('');

      const submitData = {
        name: formData.name.trim(),
        ...(formData.description && { description: formData.description.trim() }),
        ...(formData.location && { location: formData.location.trim() }),
        status: formData.status
      };

      if (editingAsset) {
        await assetService.update(editingAsset.id, submitData);
        setSuccess('Ativo atualizado com sucesso!');
      } else {
        await assetService.create(submitData);
        setSuccess('Ativo criado com sucesso!');
      }

      await loadAssets();
      handleFormClose();
    } catch (error: any) {
      console.error('Erro ao salvar ativo:', error);
      setError(error.response?.data?.message || 'Erro ao salvar ativo');
    } finally {
      setSubmitting(false);
    }
  };

  const handleDelete = async (asset: Asset) => {
    if (window.confirm(`Tem certeza que deseja remover "${asset.name}"?`)) {
      try {
        await assetService.delete(asset.id);
        setSuccess('Ativo removido com sucesso!');
        await loadAssets();
      } catch (error: any) {
        console.error('Erro ao deletar ativo:', error);
        setError(error.response?.data?.message || 'Erro ao remover ativo');
      }
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'success';
      case 'inactive': return 'default';
      case 'maintenance': return 'warning';
      default: return 'default';
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-BR');
  };

  return (
    <Box>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4" component="h1" fontWeight="bold">
          {t('assets.title')}
        </Typography>
        <Button
          variant="contained"
          startIcon={<Add />}
          onClick={handleAddAsset}
          size="large"
        >
          {t('assets.add')}
        </Button>
      </Box>

      {/* Alertas */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {success && (
        <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccess('')}>
          {success}
        </Alert>
      )}

      {/* Tabela de Ativos */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell><strong>Nome</strong></TableCell>
              <TableCell><strong>Descrição</strong></TableCell>
              <TableCell><strong>Localização</strong></TableCell>
              <TableCell><strong>Status</strong></TableCell>
              <TableCell><strong>Criado em</strong></TableCell>
              <TableCell><strong>Ações</strong></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell colSpan={6} sx={{ textAlign: 'center', py: 4 }}>
                  <CircularProgress />
                </TableCell>
              </TableRow>
            ) : assets.length === 0 ? (
              <TableRow>
                <TableCell colSpan={6} sx={{ textAlign: 'center', py: 4 }}>
                  {t('assets.noAssets')}
                </TableCell>
              </TableRow>
            ) : (
              assets.map((asset) => (
                <TableRow key={asset.id}>
                  <TableCell>{asset.name}</TableCell>
                  <TableCell>{asset.description || '-'}</TableCell>
                  <TableCell>{asset.location || '-'}</TableCell>
                  <TableCell>
                    <Chip
                      label={t(`assets.status.${asset.status}`)}
                      color={getStatusColor(asset.status) as any}
                      size="small"
                    />
                  </TableCell>
                  <TableCell>{formatDate(asset.created_at)}</TableCell>
                  <TableCell>
                    <IconButton onClick={() => handleEditAsset(asset)} color="primary">
                      <Edit />
                    </IconButton>
                    <IconButton onClick={() => handleDelete(asset)} color="error">
                      <Delete />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Dialog do Formulário */}
      <Dialog open={formOpen} onClose={handleFormClose} maxWidth="sm" fullWidth>
        <form onSubmit={handleFormSubmit}>
          <DialogTitle>
            {editingAsset ? t('assets.edit') : t('assets.add')}
          </DialogTitle>

          <DialogContent>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
              <TextField
                label="Nome *"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                fullWidth
                required
                disabled={submitting}
              />

              <TextField
                label="Descrição"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                multiline
                rows={3}
                fullWidth
                disabled={submitting}
              />

              <TextField
                label="Localização"
                value={formData.location}
                onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                fullWidth
                disabled={submitting}
              />

              <FormControl fullWidth disabled={submitting}>
                <InputLabel>Status</InputLabel>
                <Select
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: e.target.value as any })}
                  label="Status"
                >
                  <MenuItem value="active">{t('assets.status.active')}</MenuItem>
                  <MenuItem value="inactive">{t('assets.status.inactive')}</MenuItem>
                  <MenuItem value="maintenance">{t('assets.status.maintenance')}</MenuItem>
                </Select>
              </FormControl>
            </Box>
          </DialogContent>

          <DialogActions>
            <Button onClick={handleFormClose} disabled={submitting}>
              {t('common.cancel')}
            </Button>
            <Button type="submit" variant="contained" disabled={submitting}>
              {submitting ? t('common.loading') : t('common.save')}
            </Button>
          </DialogActions>
        </form>
      </Dialog>
    </Box>
  );
};

export default Assets;
</file>

<file path="src/pages/Dashboard.tsx">
// frontend/src/pages/Dashboard.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Paper,
  Chip,
  LinearProgress,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  ListItemSecondaryAction,
  Fab,
  Alert,
  Skeleton,
  useTheme,
  alpha
} from '@mui/material';
import {
  DirectionsCar,
  Build,
  CheckCircle,
  Warning,
  Error,
  Add,
  TrendingUp,
  Schedule,
  Assessment,
  Notifications
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import { useNavigate } from 'react-router-dom';
import {
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  BarChart,
  Bar
} from 'recharts';
import {
  assetService,
  maintenanceScheduleService,
  maintenanceRecordService
} from '../services/api';
import type { AssetStats, MaintenanceSchedule, MaintenanceRecord } from '../types';

// Interfaces para os dados do dashboard
interface DashboardStats {
  assets: AssetStats;
  maintenances: {
    upcoming: number;
    overdue: number;
    thisWeek: number;
    thisMonth: number;
  };
}

interface MaintenanceTrendData {
  month: string;
  realizadas: number;
  previstas: number;
}

const Dashboard: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const theme = useTheme();

  // Estados
  const [stats, setStats] = useState<DashboardStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [upcomingMaintenances, setUpcomingMaintenances] = useState<MaintenanceSchedule[]>([]);
  const [overdueMaintenances, setOverdueMaintenances] = useState<MaintenanceSchedule[]>([]);
  const [recentMaintenances, setRecentMaintenances] = useState<MaintenanceRecord[]>([]);
  const [maintenanceTrend, setMaintenanceTrend] = useState<MaintenanceTrendData[]>([]);

  // Carregar dados do dashboard
  const loadDashboardData = async () => {
    try {
      setLoading(true);

      // Carregar dados em paralelo
      const [
        assetStatsResponse,
        scheduleStatsResponse,
        upcomingResponse,
        overdueResponse,
        recentResponse
      ] = await Promise.all([
        assetService.getStats(),
        maintenanceScheduleService.getStats(),
        maintenanceScheduleService.getUpcoming(7),
        maintenanceScheduleService.getOverdue(),
        maintenanceRecordService.getRecent(5)
      ]);

      // Compilar estatísticas
      const dashboardStats: DashboardStats = {
        assets: assetStatsResponse.stats,
        maintenances: {
          upcoming: scheduleStatsResponse.stats.upcomingWeek,
          overdue: scheduleStatsResponse.stats.overdue,
          thisWeek: scheduleStatsResponse.stats.upcomingWeek,
          thisMonth: scheduleStatsResponse.stats.upcomingMonth
        }
      };

      setStats(dashboardStats);
      setUpcomingMaintenances(upcomingResponse.schedules);
      setOverdueMaintenances(overdueResponse.schedules);
      setRecentMaintenances(recentResponse.maintenanceRecords);

      // Gerar dados de tendência (últimos 5 meses)
      const trendData = generateMaintenanceTrend(recentResponse.maintenanceRecords);
      setMaintenanceTrend(trendData);

      setError('');
    } catch (error: any) {
      console.error('Erro ao carregar dashboard:', error);
      setError(t('common.error'));
    } finally {
      setLoading(false);
    }
  };

  // Gerar dados de tendência baseados nos registros reais
  const generateMaintenanceTrend = (records: MaintenanceRecord[]): MaintenanceTrendData[] => {
    const months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai'];
    const now = new Date();

    return months.map((month, index) => {
      const monthDate = new Date(now.getFullYear(), now.getMonth() - (4 - index), 1);
      const nextMonth = new Date(now.getFullYear(), now.getMonth() - (4 - index) + 1, 1);

      const realizadas = records.filter(record => {
        const recordDate = new Date(record.date_performed);
        return recordDate >= monthDate && recordDate < nextMonth;
      }).length;

      // Estimativa de manutenções previstas baseada nos registros + variação
      const previstas = Math.max(realizadas + Math.floor(Math.random() * 5) - 2, realizadas);

      return {
        month,
        realizadas,
        previstas
      };
    });
  };

  useEffect(() => {
    loadDashboardData();
  }, []);

  // Dados para gráficos
  const assetsPieData = stats ? [
    { name: t('assets.status.active'), value: stats.assets.active, color: '#4caf50' },
    { name: t('assets.status.inactive'), value: stats.assets.inactive, color: '#9e9e9e' },
    { name: t('assets.status.maintenance'), value: stats.assets.maintenance, color: '#ff9800' }
  ] : [];

  // Componente para card de estatística
  const StatCard: React.FC<{
    title: string;
    value: number;
    icon: React.ReactNode;
    color: string;
    subtitle?: string;
    growth?: number;
  }> = ({ title, value, icon, color, subtitle, growth }) => (
    <Card
      sx={{
        height: '100%',
        background: `linear-gradient(135deg, ${alpha(color, 0.1)} 0%, ${alpha(color, 0.05)} 100%)`,
        border: `1px solid ${alpha(color, 0.2)}`,
        transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',
        '&:hover': {
          transform: 'translateY(-2px)',
          boxShadow: theme.shadows[8]
        }
      }}
    >
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <Avatar sx={{ bgcolor: color, mr: 2 }}>
            {icon}
          </Avatar>
          <Box sx={{ flexGrow: 1 }}>
            <Typography color="text.secondary" gutterBottom variant="body2">
              {title}
            </Typography>
            <Typography variant="h4" component="div" fontWeight="bold">
              {value}
            </Typography>
          </Box>
          {growth !== undefined && (
            <Chip
              label={`${growth > 0 ? '+' : ''}${growth}%`}
              color={growth > 0 ? 'success' : growth < 0 ? 'error' : 'default'}
              size="small"
              icon={<TrendingUp />}
            />
          )}
        </Box>
        {subtitle && (
          <Typography variant="body2" color="text.secondary">
            {subtitle}
          </Typography>
        )}
      </CardContent>
    </Card>
  );

  // Componente para item de manutenção
  const MaintenanceItem: React.FC<{ maintenance: MaintenanceSchedule }> = ({ maintenance }) => {
    const getStatusInfo = (status: string, scheduledDate: string) => {
      const today = new Date();
      const scheduled = new Date(scheduledDate);
      const diffTime = scheduled.getTime() - today.getTime();
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      switch (status) {
        case 'overdue':
          return { color: 'error', text: `${Math.abs(diffDays)} ${t('dashboard.daysOverdue')}`, icon: <Error /> };
        case 'completed':
          return { color: 'success', text: t('dashboard.completed'), icon: <CheckCircle /> };
        case 'pending':
          if (diffDays === 0) {
            return { color: 'warning', text: t('dashboard.dueToday'), icon: <Warning /> };
          } else if (diffDays > 0) {
            return { color: 'info', text: `${diffDays} ${t('dashboard.daysRemaining')}`, icon: <Schedule /> };
          } else {
            return { color: 'error', text: `${Math.abs(diffDays)} ${t('dashboard.daysOverdue')}`, icon: <Error /> };
          }
        default:
          return { color: 'default', text: t('dashboard.pending'), icon: <Schedule /> };
      }
    };

    const statusInfo = getStatusInfo(maintenance.status, maintenance.scheduled_date);

    return (
      <ListItem
        sx={{
          border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
          borderRadius: 2,
          mb: 1,
          bgcolor: 'background.paper',
          transition: 'all 0.2s ease-in-out',
          '&:hover': {
            bgcolor: alpha(theme.palette.primary.main, 0.04),
            transform: 'translateX(4px)'
          }
        }}
      >
        <ListItemAvatar>
          <Avatar sx={{ bgcolor: `${statusInfo.color}.main` }}>
            {statusInfo.icon}
          </Avatar>
        </ListItemAvatar>
        <ListItemText
          primary={maintenance.asset_name}
          secondary={
            <>
              {maintenance.maintenance_type_name || t('dashboard.generalMaintenance')}
              <br />
              <Typography component="span" variant="caption" color="text.secondary">
                {t('dashboard.dueDate')}: {new Date(maintenance.scheduled_date).toLocaleDateString('pt-BR')}
              </Typography>
            </>
          }
          primaryTypographyProps={{
            variant: 'subtitle2',
            fontWeight: 'medium'
          }}
          secondaryTypographyProps={{
            variant: 'body2',
            color: 'text.secondary',
            component: 'span'
          }}
        />
        <ListItemSecondaryAction>
          <Chip
            label={statusInfo.text}
            color={statusInfo.color as any}
            size="small"
            variant="outlined"
          />
        </ListItemSecondaryAction>
      </ListItem>
    );
  };

  if (loading) {
    return (
      <Box>
        <Typography variant="h4" component="h1" fontWeight="bold" sx={{ mb: 3 }}>
          {t('dashboard.title')}
        </Typography>

        <Grid container spacing={3}>
          {[1, 2, 3, 4].map((i) => (
            <Grid item xs={12} sm={6} md={3} key={i}>
              <Card>
                <CardContent>
                  <Skeleton variant="circular" width={40} height={40} sx={{ mb: 2 }} />
                  <Skeleton variant="text" width="60%" height={24} />
                  <Skeleton variant="text" width="40%" height={32} />
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      </Box>
    );
  }

  return (
    <Box>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
        <Box>
          <Typography variant="h4" component="h1" fontWeight="bold">
            {t('dashboard.title')}
          </Typography>
          <Typography variant="body1" color="text.secondary" sx={{ mt: 1 }}>
            {t('dashboard.welcome')}
          </Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Button
            variant="outlined"
            startIcon={<Assessment />}
            onClick={() => navigate('/maintenance-schedules')}
          >
            {t('dashboard.seeMaintenances')}
          </Button>
          <Button
            variant="contained"
            startIcon={<Add />}
            onClick={() => navigate('/assets')}
          >
            {t('dashboard.addAsset')}
          </Button>
        </Box>
      </Box>

      {/* Error Alert */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {/* Stats Cards */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title={t('dashboard.assetCount')}
            value={stats?.assets.total || 0}
            icon={<DirectionsCar />}
            color={theme.palette.primary.main}
            subtitle={t('dashboard.equipmentRegistered')}
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title={t('dashboard.activeAssets')}
            value={stats?.assets.active || 0}
            icon={<CheckCircle />}
            color={theme.palette.success.main}
            subtitle={t('dashboard.normalOperation')}
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title={t('dashboard.upcomingMaintenance')}
            value={stats?.maintenances.upcoming || 0}
            icon={<Schedule />}
            color={theme.palette.warning.main}
            subtitle={t('dashboard.next7Days')}
          />
        </Grid>
        <Grid item xs={12} sm={6} md={3}>
          <StatCard
            title={t('dashboard.overdueMaintenance')}
            value={stats?.maintenances.overdue || 0}
            icon={<Error />}
            color={theme.palette.error.main}
            subtitle={t('dashboard.requiresAttention')}
          />
        </Grid>
      </Grid>

      {/* Main Content Grid */}
      <Grid container spacing={3}>
        {/* Próximas Manutenções */}
        <Grid item xs={12} md={8}>
          <Card>
            <CardContent>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h6" component="h2" fontWeight="bold">
                  {t('dashboard.upcomingMaintenances')}
                </Typography>
                <Chip
                  label={`${upcomingMaintenances.length + overdueMaintenances.length} ${t('dashboard.pendingCount')}`}
                  color="primary"
                  size="small"
                />
              </Box>

              {(upcomingMaintenances.length + overdueMaintenances.length) === 0 ? (
                <Box sx={{ textAlign: 'center', py: 4 }}>
                  <CheckCircle sx={{ fontSize: 48, color: 'success.main', mb: 2 }} />
                  <Typography variant="h6" color="text.secondary">
                    {t('dashboard.allUpToDate')}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {t('dashboard.noScheduledMaintenance')}
                  </Typography>
                </Box>
              ) : (
                <List sx={{ maxHeight: 400, overflow: 'auto' }}>
                  {/* Manutenções Atrasadas primeiro */}
                  {overdueMaintenances.map((maintenance) => (
                    <MaintenanceItem key={`overdue-${maintenance.id}`} maintenance={maintenance} />
                  ))}
                  {/* Manutenções Próximas */}
                  {upcomingMaintenances.map((maintenance) => (
                    <MaintenanceItem key={`upcoming-${maintenance.id}`} maintenance={maintenance} />
                  ))}
                </List>
              )}

              <Box sx={{ mt: 2, textAlign: 'center' }}>
                <Button
                  variant="outlined"
                  onClick={() => navigate('/maintenance-schedules')}
                  startIcon={<Build />}
                >
                  {t('dashboard.seeAllMaintenances')}
                </Button>
              </Box>
            </CardContent>
          </Card>
        </Grid>

        {/* Gráfico de Distribuição de Ativos */}
        <Grid item xs={12} md={4}>
          <Card sx={{ height: '100%' }}>
            <CardContent>
              <Typography variant="h6" component="h2" fontWeight="bold" sx={{ mb: 2 }}>
                {t('dashboard.assetDistribution')}
              </Typography>

              {stats?.assets.total === 0 ? (
                <Box sx={{ textAlign: 'center', py: 4 }}>
                  <DirectionsCar sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                  <Typography variant="body2" color="text.secondary">
                    {t('dashboard.noAssetsYet')}
                  </Typography>
                  <Button
                    variant="contained"
                    size="small"
                    sx={{ mt: 2 }}
                    onClick={() => navigate('/assets')}
                  >
                    {t('dashboard.addFirstAsset')}
                  </Button>
                </Box>
              ) : (
                <ResponsiveContainer width="100%" height={200}>
                  <PieChart>
                    <Pie
                      data={assetsPieData}
                      cx="50%"
                      cy="50%"
                      innerRadius={40}
                      outerRadius={80}
                      paddingAngle={5}
                      dataKey="value"
                    >
                      {assetsPieData.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={entry.color} />
                      ))}
                    </Pie>
                    <Tooltip />
                    <Legend />
                  </PieChart>
                </ResponsiveContainer>
              )}

              {/* Stats Summary */}
              {stats && stats.assets.total > 0 && (
                <Box sx={{ mt: 2 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2" color="text.secondary">Ativos</Typography>
                    <Typography variant="body2" fontWeight="medium">{stats.assets.active}</Typography>
                  </Box>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2" color="text.secondary">Inativos</Typography>
                    <Typography variant="body2" fontWeight="medium">{stats.assets.inactive}</Typography>
                  </Box>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                    <Typography variant="body2" color="text.secondary">Em Manutenção</Typography>
                    <Typography variant="body2" fontWeight="medium">{stats.assets.maintenance}</Typography>
                  </Box>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Gráfico de Tendência de Manutenções */}
        <Grid item xs={12}>
          <Card>
            <CardContent>
              <Typography variant="h6" component="h2" fontWeight="bold" sx={{ mb: 2 }}>
                {t('dashboard.maintenanceTrend')}
              </Typography>

              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={maintenanceTrend}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line
                    type="monotone"
                    dataKey="realizadas"
                    stroke={theme.palette.primary.main}
                    strokeWidth={3}
                    name={t('dashboard.performed')}
                  />
                  <Line
                    type="monotone"
                    dataKey="previstas"
                    stroke={theme.palette.secondary.main}
                    strokeWidth={3}
                    strokeDasharray="5 5"
                    name={t('dashboard.scheduled')}
                  />
                </LineChart>
              </ResponsiveContainer>

              <Box sx={{ mt: 2, textAlign: 'center' }}>
                <Typography variant="body2" color="text.secondary">
                  {t('dashboard.trackPerformance')}
                </Typography>
              </Box>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Floating Action Button */}
      <Fab
        color="primary"
        aria-label="add"
        sx={{
          position: 'fixed',
          bottom: 16,
          right: 16,
        }}
        onClick={() => navigate('/assets')}
      >
        <Add />
      </Fab>
    </Box>
  );
};

export default Dashboard;
</file>

<file path="src/pages/ForgotPassword.tsx">
// frontend/src/pages/ForgotPassword.tsx
import React, { useState } from 'react';
import {
  Box,
  Paper,
  TextField,
  Button,
  Typography,
  Link,
  Alert,
  Container
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { Link as RouterLink } from 'react-router-dom';
import { authService } from '../services/api';

const ForgotPassword: React.FC = () => {
  const { t } = useTranslation();

  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setEmail(event.target.value);
    if (error) setError('');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!email) {
      setError('Por favor, informe seu e-mail');
      return;
    }

    if (!email.includes('@')) {
      setError('Por favor, informe um e-mail válido');
      return;
    }

    try {
      setLoading(true);
      setError('');

      await authService.forgotPassword(email);
      setSuccess(true);
    } catch (error: any) {
      console.error('Erro ao solicitar recuperação:', error);
      const message = error.response?.data?.message || 'Erro ao enviar e-mail de recuperação';
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return (
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          bgcolor: 'background.default',
          p: 2
        }}
      >
        <Container component="main" maxWidth="sm">
          <Paper elevation={3} sx={{ padding: 4, width: '100%' }}>
            <Box sx={{ textAlign: 'center' }}>
              <Typography component="h1" variant="h4" fontWeight="bold" sx={{ mb: 2 }}>
                E-mail enviado!
              </Typography>

              <Alert severity="success" sx={{ mb: 3 }}>
                Instruções para recuperar sua senha foram enviadas para <strong>{email}</strong>
              </Alert>

              <Typography variant="body1" sx={{ mb: 3 }}>
                Verifique sua caixa de entrada e spam. O link de recuperação expira em 1 hora.
              </Typography>

              <Button
                component={RouterLink}
                to="/login"
                variant="contained"
                size="large"
                fullWidth
              >
                Voltar ao Login
              </Button>
            </Box>
          </Paper>
        </Container>
      </Box>
    );
  }

  // Return principal
  return (
    <Box
      sx={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        bgcolor: 'background.default',
        p: 2
      }}
    >
      <Container component="main" maxWidth="sm">
        <Paper elevation={3} sx={{ padding: 4, width: '100%' }}>
          <Box sx={{ textAlign: 'center', mb: 3 }}>
            <Typography component="h1" variant="h4" fontWeight="bold">
              {t('auth.forgotPassword')}
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              Informe seu e-mail para receber instruções de recuperação
            </Typography>
          </Box>

          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}

          <Box component="form" onSubmit={handleSubmit}>
            <TextField
              margin="normal"
              required
              fullWidth
              id="email"
              label={t('auth.email')}
              name="email"
              autoComplete="email"
              autoFocus
              value={email}
              onChange={handleChange}
              disabled={loading}
              placeholder="seu@email.com"
            />

            <Button
              type="submit"
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
              disabled={loading || !email}
              size="large"
            >
              {loading ? t('common.loading') : 'Enviar instruções'}
            </Button>

            <Box sx={{ textAlign: 'center', mt: 2 }}>
              <Typography variant="body2">
                Lembrou da senha?{' '}
                <Link component={RouterLink} to="/login">
                  {t('auth.login')}
                </Link>
              </Typography>
            </Box>

            <Box sx={{ textAlign: 'center', mt: 1 }}>
              <Typography variant="body2">
                Não tem conta?{' '}
                <Link component={RouterLink} to="/register">
                  {t('auth.register')}
                </Link>
              </Typography>
            </Box>
          </Box>
        </Paper>
      </Container>
    </Box>
  );
};

export default ForgotPassword;
</file>

<file path="src/pages/Login.tsx">
// frontend/src/pages/Login.tsx
import React, { useState } from 'react';
import {
  Box,
  Paper,
  TextField,
  Button,
  Typography,
  Link,
  Alert
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { Link as RouterLink, useNavigate } from 'react-router-dom';
import { authService } from '../services/api';

const Login: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleChange = (field: 'email' | 'password') => (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setFormData(prev => ({
      ...prev,
      [field]: event.target.value
    }));
    if (error) setError(''); // Limpar erro quando usuário começar a digitar
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.email || !formData.password) {
      setError('Por favor, preencha todos os campos');
      return;
    }

    try {
      setLoading(true);
      setError('');

      const response = await authService.login(formData.email, formData.password);

      // Salvar dados no localStorage
      localStorage.setItem('token', response.token);
      localStorage.setItem('user', JSON.stringify(response.user));

      // Redirecionar para dashboard
      navigate('/');
    } catch (error: any) {
      console.error('Erro no login:', error);
      const message = error.response?.data?.message || 'Erro ao fazer login';
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box
      sx={{
        minHeight: '100vh',
        display: 'flex',
        width: '100%',
        alignItems: 'center',
        justifyContent: 'center',
        bgcolor: 'background.default',
        p: 2
      }}
    >
      <Paper elevation={3} sx={{ padding: 4, width: '100%', maxWidth: 400, mx: 'auto' }}>
        <Box sx={{ textAlign: 'center', mb: 3 }}>
          <Typography component="h1" variant="h4" fontWeight="bold">
            {t('auth.login')}
          </Typography>
          <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
            {t('app.title')}
          </Typography>
        </Box>

        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        <Box component="form" onSubmit={handleSubmit}>
          <TextField
            margin="normal"
            required
            fullWidth
            id="email"
            label={t('auth.email')}
            name="email"
            autoComplete="email"
            autoFocus
            value={formData.email}
            onChange={handleChange('email')}
            disabled={loading}
          />

          <TextField
            margin="normal"
            required
            fullWidth
            name="password"
            label={t('auth.password')}
            type="password"
            id="password"
            autoComplete="current-password"
            value={formData.password}
            onChange={handleChange('password')}
            disabled={loading}
          />

          <Button
            type="submit"
            fullWidth
            variant="contained"
            sx={{ mt: 3, mb: 2 }}
            disabled={loading}
            size="large"
          >
            {loading ? t('common.loading') : t('auth.login')}
          </Button>

          <Box sx={{ textAlign: 'center', mt: 2 }}>
            <Link component={RouterLink} to="/forgot-password" variant="body2">
              {t('auth.forgotPassword')}
            </Link>
          </Box>

          <Box sx={{ textAlign: 'center', mt: 2 }}>
            <Typography variant="body2">
              {t('auth.noAccount')}{' '}
              <Link component={RouterLink} to="/register">
                {t('auth.register')}
              </Link>
            </Typography>
          </Box>
        </Box>
      </Paper>
    </Box>
  );
};

export default Login;
</file>

<file path="src/pages/MaintenanceRecords.tsx">
// frontend/src/pages/MaintenanceRecords.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Alert,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress,
  Card,
  CardContent,
  Grid,
  InputAdornment,
  Tabs,
  Tab
} from '@mui/material';
import { Add, Edit, Delete, Build, AttachMoney, CalendarToday, Search } from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import type { MaintenanceRecord, CreateMaintenanceRecordData, UpdateMaintenanceRecordData, Asset, MaintenanceType } from '../types';
import { maintenanceRecordService, assetService, maintenanceTypeService } from '../services/api';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const MaintenanceRecords: React.FC = () => {
  const { t } = useTranslation();

  // Estados
  const [records, setRecords] = useState<MaintenanceRecord[]>([]);
  const [assets, setAssets] = useState<Asset[]>([]);
  const [maintenanceTypes, setMaintenanceTypes] = useState<MaintenanceType[]>([]);
  const [loading, setLoading] = useState(true);
  const [formOpen, setFormOpen] = useState(false);
  const [editingRecord, setEditingRecord] = useState<MaintenanceRecord | null>(null);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [stats, setStats] = useState<any>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [tabValue, setTabValue] = useState(0);

  // Form data
  const [formData, setFormData] = useState<CreateMaintenanceRecordData>({
    asset_id: 0,
    maintenance_type_id: undefined,
    date_performed: new Date().toISOString().split('T')[0],
    notes: '',
    cost: undefined
  });

  // Carregar dados
  const loadData = async () => {
    try {
      setLoading(true);
      const [recordsResponse, assetsResponse, typesResponse, statsResponse] = await Promise.all([
        maintenanceRecordService.getAll(),
        assetService.getAll(),
        maintenanceTypeService.getAll(),
        maintenanceRecordService.getStats()
      ]);

      setRecords(recordsResponse.maintenanceRecords);
      setAssets(assetsResponse.assets);
      setMaintenanceTypes(typesResponse.maintenanceTypes);
      setStats(statsResponse.stats);
      setError('');
    } catch (error: any) {
      console.error('Erro ao carregar dados:', error);
      setError('Erro ao carregar dados');
    } finally {
      setLoading(false);
    }
  };

  // Carregar dados na montagem
  useEffect(() => {
    loadData();
  }, []);

  // Filtrar registros
  const filteredRecords = records.filter(record =>
    record.asset_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    record.maintenance_type_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    record.notes?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Handlers do formulário
  const handleAddRecord = () => {
    setEditingRecord(null);
    setFormData({
      asset_id: 0,
      maintenance_type_id: undefined,
      date_performed: new Date().toISOString().split('T')[0],
      notes: '',
      cost: undefined
    });
    setFormOpen(true);
  };

  const handleEditRecord = (record: MaintenanceRecord) => {
    setEditingRecord(record);
    setFormData({
      asset_id: record.asset_id,
      maintenance_type_id: record.maintenance_type_id,
      date_performed: record.date_performed,
      notes: record.notes || '',
      cost: record.cost
    });
    setFormOpen(true);
  };

  const handleFormClose = () => {
    setFormOpen(false);
    setEditingRecord(null);
    setFormData({
      asset_id: 0,
      maintenance_type_id: undefined,
      date_performed: new Date().toISOString().split('T')[0],
      notes: '',
      cost: undefined
    });
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.asset_id) {
      setError('Ativo é obrigatório');
      return;
    }

    if (!formData.date_performed) {
      setError('Data é obrigatória');
      return;
    }

    try {
      setSubmitting(true);
      setError('');

      const submitData = {
        asset_id: formData.asset_id,
        maintenance_type_id: formData.maintenance_type_id || undefined,
        date_performed: formData.date_performed,
        notes: formData.notes?.trim() || undefined,
        cost: formData.cost || undefined
      };

      if (editingRecord) {
        await maintenanceRecordService.update(editingRecord.id!, submitData);
        setSuccess('Registro de manutenção atualizado com sucesso!');
      } else {
        await maintenanceRecordService.create(submitData);
        setSuccess('Registro de manutenção criado com sucesso!');
      }

      await loadData();
      handleFormClose();
    } catch (error: any) {
      console.error('Erro ao salvar registro:', error);
      setError(error.response?.data?.message || 'Erro ao salvar registro de manutenção');
    } finally {
      setSubmitting(false);
    }
  };

  const handleDelete = async (record: MaintenanceRecord) => {
    if (window.confirm(`Tem certeza que deseja remover este registro de manutenção?`)) {
      try {
        await maintenanceRecordService.delete(record.id!);
        setSuccess('Registro de manutenção removido com sucesso!');
        await loadData();
      } catch (error: any) {
        console.error('Erro ao deletar registro:', error);
        setError(error.response?.data?.message || 'Erro ao remover registro de manutenção');
      }
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-BR');
  };

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  };

  return (
    <Box>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h4" component="h1" fontWeight="bold">
            {t('maintenance.records.title')}
          </Typography>
          <Typography variant="body1" color="text.secondary" sx={{ mt: 1 }}>
            Registre e acompanhe todas as manutenções realizadas
          </Typography>
        </Box>
        <Button
          variant="contained"
          startIcon={<Add />}
          onClick={handleAddRecord}
          size="large"
        >
          {t('maintenance.records.add')}
        </Button>
      </Box>

      {/* Tabs */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
        <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>
          <Tab label="Registros" />
          <Tab label="Estatísticas" />
        </Tabs>
      </Box>

      {/* Tab Panel - Registros */}
      <TabPanel value={tabValue} index={0}>
        {/* Alertas */}
        {error && (
          <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
            {error}
          </Alert>
        )}

        {success && (
          <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccess('')}>
            {success}
          </Alert>
        )}

        {/* Busca */}
        <TextField
          fullWidth
          placeholder="Buscar por ativo, tipo de manutenção ou observações..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          InputProps={{
            startAdornment: (
              <InputAdornment position="start">
                <Search />
              </InputAdornment>
            ),
          }}
          sx={{ mb: 3 }}
        />

        {/* Tabela de Registros */}
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell><strong>Ativo</strong></TableCell>
                <TableCell><strong>Tipo de Manutenção</strong></TableCell>
                <TableCell><strong>Data</strong></TableCell>
                <TableCell><strong>Custo</strong></TableCell>
                <TableCell><strong>Observações</strong></TableCell>
                <TableCell><strong>Ações</strong></TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={6} sx={{ textAlign: 'center', py: 4 }}>
                    <CircularProgress />
                  </TableCell>
                </TableRow>
              ) : filteredRecords.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} sx={{ textAlign: 'center', py: 4 }}>
                    <Build sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                    <Typography variant="h6" color="text.secondary">
                      {searchTerm ? 'Nenhum registro encontrado' : 'Nenhum registro de manutenção encontrado'}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {searchTerm ? 'Tente ajustar os termos da busca' : 'Comece registrando sua primeira manutenção'}
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : (
                filteredRecords.map((record) => (
                  <TableRow key={record.id}>
                    <TableCell>{record.asset_name}</TableCell>
                    <TableCell>
                      {record.maintenance_type_name ? (
                        <Chip label={record.maintenance_type_name} size="small" />
                      ) : (
                        '-'
                      )}
                    </TableCell>
                    <TableCell>{formatDate(record.date_performed)}</TableCell>
                    <TableCell>
                      {record.cost ? formatCurrency(record.cost) : '-'}
                    </TableCell>
                    <TableCell sx={{ maxWidth: 200, overflow: 'hidden', textOverflow: 'ellipsis' }}>
                      {record.notes || '-'}
                    </TableCell>
                    <TableCell>
                      <IconButton onClick={() => handleEditRecord(record)} color="primary">
                        <Edit />
                      </IconButton>
                      <IconButton onClick={() => handleDelete(record)} color="error">
                        <Delete />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </TabPanel>

      {/* Tab Panel - Estatísticas */}
      <TabPanel value={tabValue} index={1}>
        {stats && (
          <Grid container spacing={3}>
            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Total de Registros
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold">
                    {stats.totalRecords}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Ativos com Manutenção
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold">
                    {stats.assetsWithMaintenance}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Custo Total
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold">
                    {formatCurrency(stats.totalCost)}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={3}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Custo Médio
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold">
                    {formatCurrency(stats.averageCost)}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Últimos 30 Dias
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold">
                    {stats.last30Days}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    manutenções realizadas
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Últimos 90 Dias
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold">
                    {stats.last90Days}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    manutenções realizadas
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        )}
      </TabPanel>

      {/* Dialog do Formulário */}
      <Dialog open={formOpen} onClose={handleFormClose} maxWidth="sm" fullWidth>
        <form onSubmit={handleFormSubmit}>
          <DialogTitle>
            {editingRecord ? t('maintenance.records.edit') : t('maintenance.records.add')}
          </DialogTitle>

          <DialogContent>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
              <FormControl fullWidth required disabled={submitting}>
                <InputLabel>Ativo</InputLabel>
                <Select
                  value={formData.asset_id}
                  onChange={(e) => setFormData({ ...formData, asset_id: Number(e.target.value) })}
                  label="Ativo"
                >
                  <MenuItem value={0}>Selecione um ativo</MenuItem>
                  {assets.map((asset) => (
                    <MenuItem key={asset.id} value={asset.id}>
                      {asset.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl fullWidth disabled={submitting}>
                <InputLabel>Tipo de Manutenção</InputLabel>
                <Select
                  value={formData.maintenance_type_id || ''}
                  onChange={(e) => setFormData({ ...formData, maintenance_type_id: Number(e.target.value) || undefined })}
                  label="Tipo de Manutenção"
                >
                  <MenuItem value="">Nenhum</MenuItem>
                  {maintenanceTypes.map((type) => (
                    <MenuItem key={type.id} value={type.id}>
                      {type.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <TextField
                label="Data da Manutenção *"
                type="date"
                value={formData.date_performed}
                onChange={(e) => setFormData({ ...formData, date_performed: e.target.value })}
                fullWidth
                required
                disabled={submitting}
                InputLabelProps={{
                  shrink: true,
                }}
              />

              <TextField
                label="Custo"
                type="number"
                value={formData.cost || ''}
                onChange={(e) => setFormData({ ...formData, cost: Number(e.target.value) || undefined })}
                fullWidth
                disabled={submitting}
                InputProps={{
                  startAdornment: <InputAdornment position="start">R$</InputAdornment>,
                }}
                placeholder="0,00"
              />

              <TextField
                label="Observações"
                value={formData.notes}
                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
                multiline
                rows={4}
                fullWidth
                disabled={submitting}
                placeholder="Descreva os detalhes da manutenção realizada..."
              />
            </Box>
          </DialogContent>

          <DialogActions>
            <Button onClick={handleFormClose} disabled={submitting}>
              {t('common.cancel')}
            </Button>
            <Button type="submit" variant="contained" disabled={submitting}>
              {submitting ? t('common.loading') : t('common.save')}
            </Button>
          </DialogActions>
        </form>
      </Dialog>
    </Box>
  );
};

export default MaintenanceRecords;
</file>

<file path="src/pages/MaintenanceSchedules.tsx">
// frontend/src/pages/MaintenanceSchedules.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Alert,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  CircularProgress,
  Card,
  CardContent,
  Grid,
  Tabs,
  Tab,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  ListItemSecondaryAction
} from '@mui/material';
import {
  Add, Edit, Delete, Schedule, CheckCircle, Warning, Error,
  Event, Autorenew, TrendingUp, CalendarToday
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import type {
  MaintenanceSchedule,
  CreateMaintenanceScheduleData,
  UpdateMaintenanceScheduleData,
  Asset,
  MaintenanceType
} from '../types';
import { maintenanceScheduleService, assetService, maintenanceTypeService } from '../services/api';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const MaintenanceSchedules: React.FC = () => {
  const { t } = useTranslation();

  // Estados
  const [schedules, setSchedules] = useState<MaintenanceSchedule[]>([]);
  const [upcomingSchedules, setUpcomingSchedules] = useState<MaintenanceSchedule[]>([]);
  const [overdueSchedules, setOverdueSchedules] = useState<MaintenanceSchedule[]>([]);
  const [assets, setAssets] = useState<Asset[]>([]);
  const [maintenanceTypes, setMaintenanceTypes] = useState<MaintenanceType[]>([]);
  const [loading, setLoading] = useState(true);
  const [formOpen, setFormOpen] = useState(false);
  const [editingSchedule, setEditingSchedule] = useState<MaintenanceSchedule | null>(null);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [stats, setStats] = useState<any>(null);
  const [tabValue, setTabValue] = useState(0);

  // Form data
  const [formData, setFormData] = useState<CreateMaintenanceScheduleData>({
    asset_id: 0,
    maintenance_type_id: undefined,
    frequency_type: 'months',
    frequency_value: 1,
    scheduled_date: undefined
  });

  // Carregar dados
  const loadData = async () => {
    try {
      setLoading(true);
      const [
        schedulesResponse,
        upcomingResponse,
        overdueResponse,
        assetsResponse,
        typesResponse,
        statsResponse
      ] = await Promise.all([
        maintenanceScheduleService.getAll(),
        maintenanceScheduleService.getUpcoming(7),
        maintenanceScheduleService.getOverdue(),
        assetService.getAll(),
        maintenanceTypeService.getAll(),
        maintenanceScheduleService.getStats()
      ]);

      setSchedules(schedulesResponse.schedules);
      setUpcomingSchedules(upcomingResponse.schedules);
      setOverdueSchedules(overdueResponse.schedules);
      setAssets(assetsResponse.assets);
      setMaintenanceTypes(typesResponse.maintenanceTypes);
      setStats(statsResponse.stats);
      setError('');
    } catch (error: any) {
      console.error('Erro ao carregar dados:', error);
      setError('Erro ao carregar dados');
    } finally {
      setLoading(false);
    }
  };

  // Carregar dados na montagem
  useEffect(() => {
    loadData();
  }, []);

  // Handlers do formulário
  const handleAddSchedule = () => {
    setEditingSchedule(null);
    setFormData({
      asset_id: 0,
      maintenance_type_id: undefined,
      frequency_type: 'months',
      frequency_value: 1,
      scheduled_date: undefined
    });
    setFormOpen(true);
  };

  const handleEditSchedule = (schedule: MaintenanceSchedule) => {
    setEditingSchedule(schedule);
    setFormData({
      asset_id: schedule.asset_id,
      maintenance_type_id: schedule.maintenance_type_id,
      frequency_type: schedule.frequency_type,
      frequency_value: schedule.frequency_value,
      scheduled_date: schedule.scheduled_date
    });
    setFormOpen(true);
  };

  const handleFormClose = () => {
    setFormOpen(false);
    setEditingSchedule(null);
    setFormData({
      asset_id: 0,
      maintenance_type_id: undefined,
      frequency_type: 'months',
      frequency_value: 1,
      scheduled_date: undefined
    });
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.asset_id) {
      setError('Ativo é obrigatório');
      return;
    }

    if (!formData.frequency_value || formData.frequency_value <= 0) {
      setError('Valor da frequência deve ser maior que zero');
      return;
    }

    try {
      setSubmitting(true);
      setError('');

      const submitData = {
        asset_id: formData.asset_id,
        maintenance_type_id: formData.maintenance_type_id || undefined,
        frequency_type: formData.frequency_type,
        frequency_value: formData.frequency_value,
        scheduled_date: formData.scheduled_date || undefined
      };

      if (editingSchedule) {
        await maintenanceScheduleService.update(editingSchedule.id!, submitData);
        setSuccess('Agendamento atualizado com sucesso!');
      } else {
        await maintenanceScheduleService.create(submitData);
        setSuccess('Agendamento criado com sucesso!');
      }

      await loadData();
      handleFormClose();
    } catch (error: any) {
      console.error('Erro ao salvar agendamento:', error);
      setError(error.response?.data?.message || 'Erro ao salvar agendamento');
    } finally {
      setSubmitting(false);
    }
  };

  const handleDelete = async (schedule: MaintenanceSchedule) => {
    if (window.confirm(`Tem certeza que deseja remover este agendamento?`)) {
      try {
        await maintenanceScheduleService.delete(schedule.id!);
        setSuccess('Agendamento removido com sucesso!');
        await loadData();
      } catch (error: any) {
        console.error('Erro ao deletar agendamento:', error);
        setError(error.response?.data?.message || 'Erro ao remover agendamento');
      }
    }
  };

  const getStatusInfo = (status: string, scheduledDate: string) => {
    const today = new Date();
    const scheduled = new Date(scheduledDate);
    const diffTime = scheduled.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    switch (status) {
      case 'overdue':
        return {
          color: 'error',
          text: `${Math.abs(diffDays)} dias atrasada`,
          icon: <Error />
        };
      case 'completed':
        return {
          color: 'success',
          text: 'Concluída',
          icon: <CheckCircle />
        };
      case 'pending':
        if (diffDays === 0) {
          return {
            color: 'warning',
            text: 'Vence hoje',
            icon: <Warning />
          };
        } else if (diffDays > 0) {
          return {
            color: 'info',
            text: `${diffDays} dias restantes`,
            icon: <Schedule />
          };
        } else {
          return {
            color: 'error',
            text: `${Math.abs(diffDays)} dias atrasada`,
            icon: <Error />
          };
        }
      default:
        return {
          color: 'default',
          text: 'Pendente',
          icon: <Schedule />
        };
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-BR');
  };

  const formatFrequency = (type: string, value: number) => {
    const types: { [key: string]: string } = {
      days: 'dia(s)',
      weeks: 'semana(s)',
      months: 'mês(es)',
      kilometers: 'km',
      hours: 'hora(s)'
    };
    return `${value} ${types[type] || type}`;
  };

  // Componente para item de agendamento próximo/atrasado
  const ScheduleItem: React.FC<{ schedule: MaintenanceSchedule }> = ({ schedule }) => {
    const statusInfo = getStatusInfo(schedule.status, schedule.scheduled_date);

    return (
      <ListItem
        sx={{
          border: `1px solid ${statusInfo.color === 'error' ? 'error.main' : 'divider'}`,
          borderRadius: 2,
          mb: 1,
          bgcolor: 'background.paper'
        }}
      >
        <ListItemAvatar>
          <Avatar sx={{ bgcolor: `${statusInfo.color}.main` }}>
            {statusInfo.icon}
          </Avatar>
        </ListItemAvatar>
        <ListItemText
          primary={schedule.asset_name}
          secondary={
            <>
              {schedule.maintenance_type_name || 'Manutenção geral'}
              <br />
              <Typography component="span" variant="caption" color="text.secondary">
                Agendado para: {formatDate(schedule.scheduled_date)}
              </Typography>
            </>
          }
          primaryTypographyProps={{
            variant: 'subtitle2',
            fontWeight: 'medium'
          }}
          secondaryTypographyProps={{
            variant: 'body2',
            color: 'text.secondary',
            component: 'span'
          }}
        />
        <ListItemSecondaryAction>
          <Chip
            label={statusInfo.text}
            color={statusInfo.color as any}
            size="small"
            variant="outlined"
          />
        </ListItemSecondaryAction>
      </ListItem>
    );
  };

  return (
    <Box>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h4" component="h1" fontWeight="bold">
            Agendamentos de Manutenção
          </Typography>
          <Typography variant="body1" color="text.secondary" sx={{ mt: 1 }}>
            Gerencie e acompanhe as manutenções programadas
          </Typography>
        </Box>
        <Button
          variant="contained"
          startIcon={<Add />}
          onClick={handleAddSchedule}
          size="large"
        >
          Novo Agendamento
        </Button>
      </Box>

      {/* Tabs */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
        <Tabs value={tabValue} onChange={(e, newValue) => setTabValue(newValue)}>
          <Tab label="Visão Geral" />
          <Tab label="Todos os Agendamentos" />
          <Tab label="Estatísticas" />
        </Tabs>
      </Box>

      {/* Tab Panel - Visão Geral */}
      <TabPanel value={tabValue} index={0}>
        {/* Alertas */}
        {error && (
          <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
            {error}
          </Alert>
        )}

        {success && (
          <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccess('')}>
            {success}
          </Alert>
        )}

        <Grid container spacing={3}>
          {/* Manutenções Atrasadas */}
          <Grid item xs={12} md={6}>
            <Card sx={{ height: '100%' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Error color="error" sx={{ mr: 1 }} />
                  <Typography variant="h6" fontWeight="bold">
                    Manutenções Atrasadas
                  </Typography>
                  <Chip
                    label={overdueSchedules.length}
                    color="error"
                    size="small"
                    sx={{ ml: 'auto' }}
                  />
                </Box>

                {loading ? (
                  <Box sx={{ textAlign: 'center', py: 2 }}>
                    <CircularProgress />
                  </Box>
                ) : overdueSchedules.length === 0 ? (
                  <Box sx={{ textAlign: 'center', py: 4 }}>
                    <CheckCircle sx={{ fontSize: 48, color: 'success.main', mb: 2 }} />
                    <Typography variant="body2" color="text.secondary">
                      Nenhuma manutenção atrasada!
                    </Typography>
                  </Box>
                ) : (
                  <List sx={{ maxHeight: 300, overflow: 'auto' }}>
                    {overdueSchedules.map((schedule) => (
                      <ScheduleItem key={schedule.id} schedule={schedule} />
                    ))}
                  </List>
                )}
              </CardContent>
            </Card>
          </Grid>

          {/* Próximas Manutenções */}
          <Grid item xs={12} md={6}>
            <Card sx={{ height: '100%' }}>
              <CardContent>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Schedule color="warning" sx={{ mr: 1 }} />
                  <Typography variant="h6" fontWeight="bold">
                    Próximas Manutenções (7 dias)
                  </Typography>
                  <Chip
                    label={upcomingSchedules.length}
                    color="warning"
                    size="small"
                    sx={{ ml: 'auto' }}
                  />
                </Box>

                {loading ? (
                  <Box sx={{ textAlign: 'center', py: 2 }}>
                    <CircularProgress />
                  </Box>
                ) : upcomingSchedules.length === 0 ? (
                  <Box sx={{ textAlign: 'center', py: 4 }}>
                    <Event sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                    <Typography variant="body2" color="text.secondary">
                      Nenhuma manutenção próxima
                    </Typography>
                  </Box>
                ) : (
                  <List sx={{ maxHeight: 300, overflow: 'auto' }}>
                    {upcomingSchedules.map((schedule) => (
                      <ScheduleItem key={schedule.id} schedule={schedule} />
                    ))}
                  </List>
                )}
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </TabPanel>

      {/* Tab Panel - Todos os Agendamentos */}
      <TabPanel value={tabValue} index={1}>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell><strong>Ativo</strong></TableCell>
                <TableCell><strong>Tipo</strong></TableCell>
                <TableCell><strong>Data Agendada</strong></TableCell>
                <TableCell><strong>Frequência</strong></TableCell>
                <TableCell><strong>Status</strong></TableCell>
                <TableCell><strong>Ações</strong></TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={6} sx={{ textAlign: 'center', py: 4 }}>
                    <CircularProgress />
                  </TableCell>
                </TableRow>
              ) : schedules.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} sx={{ textAlign: 'center', py: 4 }}>
                    <Schedule sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                    <Typography variant="h6" color="text.secondary">
                      Nenhum agendamento encontrado
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Comece criando seu primeiro agendamento
                    </Typography>
                  </TableCell>
                </TableRow>
              ) : (
                schedules.map((schedule) => {
                  const statusInfo = getStatusInfo(schedule.status, schedule.scheduled_date);
                  return (
                    <TableRow key={schedule.id}>
                      <TableCell>{schedule.asset_name}</TableCell>
                      <TableCell>
                        {schedule.maintenance_type_name ? (
                          <Chip label={schedule.maintenance_type_name} size="small" />
                        ) : (
                          '-'
                        )}
                      </TableCell>
                      <TableCell>{formatDate(schedule.scheduled_date)}</TableCell>
                      <TableCell>
                        {formatFrequency(schedule.frequency_type, schedule.frequency_value)}
                      </TableCell>
                      <TableCell>
                        <Chip
                          label={statusInfo.text}
                          color={statusInfo.color as any}
                          size="small"
                          icon={statusInfo.icon}
                        />
                      </TableCell>
                      <TableCell>
                        <IconButton onClick={() => handleEditSchedule(schedule)} color="primary">
                          <Edit />
                        </IconButton>
                        <IconButton onClick={() => handleDelete(schedule)} color="error">
                          <Delete />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                  );
                })
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </TabPanel>

      {/* Tab Panel - Estatísticas */}
      <TabPanel value={tabValue} index={2}>
        {stats && (
          <Grid container spacing={3}>
            <Grid item xs={12} sm={6} md={4}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Total de Agendamentos
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold">
                    {stats.totalSchedules}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Pendentes
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold" color="warning.main">
                    {stats.pending}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Concluídos
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold" color="success.main">
                    {stats.completed}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Atrasados
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold" color="error.main">
                    {stats.overdue}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Próxima Semana
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold">
                    {stats.upcomingWeek}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} sm={6} md={4}>
              <Card>
                <CardContent>
                  <Typography color="text.secondary" gutterBottom>
                    Próximo Mês
                  </Typography>
                  <Typography variant="h4" component="div" fontWeight="bold">
                    {stats.upcomingMonth}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        )}
      </TabPanel>

      {/* Dialog do Formulário */}
      <Dialog open={formOpen} onClose={handleFormClose} maxWidth="sm" fullWidth>
        <form onSubmit={handleFormSubmit}>
          <DialogTitle>
            {editingSchedule ? 'Editar Agendamento' : 'Novo Agendamento'}
          </DialogTitle>

          <DialogContent>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
              <FormControl fullWidth required disabled={submitting}>
                <InputLabel>Ativo</InputLabel>
                <Select
                  value={formData.asset_id}
                  onChange={(e) => setFormData({ ...formData, asset_id: Number(e.target.value) })}
                  label="Ativo"
                >
                  <MenuItem value={0}>Selecione um ativo</MenuItem>
                  {assets.map((asset) => (
                    <MenuItem key={asset.id} value={asset.id}>
                      {asset.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl fullWidth disabled={submitting}>
                <InputLabel>Tipo de Manutenção</InputLabel>
                <Select
                  value={formData.maintenance_type_id || ''}
                  onChange={(e) => setFormData({ ...formData, maintenance_type_id: Number(e.target.value) || undefined })}
                  label="Tipo de Manutenção"
                >
                  <MenuItem value="">Manutenção geral</MenuItem>
                  {maintenanceTypes.map((type) => (
                    <MenuItem key={type.id} value={type.id}>
                      {type.name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <Grid container spacing={2}>
                <Grid item xs={8}>
                  <TextField
                    label="Valor da Frequência *"
                    type="number"
                    value={formData.frequency_value}
                    onChange={(e) => setFormData({ ...formData, frequency_value: Number(e.target.value) })}
                    fullWidth
                    required
                    disabled={submitting}
                    inputProps={{ min: 1 }}
                  />
                </Grid>
                <Grid item xs={4}>
                  <FormControl fullWidth required disabled={submitting}>
                    <InputLabel>Tipo</InputLabel>
                    <Select
                      value={formData.frequency_type}
                      onChange={(e) => setFormData({ ...formData, frequency_type: e.target.value as any })}
                      label="Tipo"
                    >
                      <MenuItem value="days">Dias</MenuItem>
                      <MenuItem value="weeks">Semanas</MenuItem>
                      <MenuItem value="months">Meses</MenuItem>
                      <MenuItem value="kilometers">Km</MenuItem>
                      <MenuItem value="hours">Horas</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>

              <TextField
                label="Data Específica (opcional)"
                type="date"
                value={formData.scheduled_date || ''}
                onChange={(e) => setFormData({ ...formData, scheduled_date: e.target.value || undefined })}
                fullWidth
                disabled={submitting}
                InputLabelProps={{
                  shrink: true,
                }}
                helperText="Se não informado, será calculado automaticamente"
              />
            </Box>
          </DialogContent>

          <DialogActions>
            <Button onClick={handleFormClose} disabled={submitting}>
              Cancelar
            </Button>
            <Button type="submit" variant="contained" disabled={submitting}>
              {submitting ? 'Salvando...' : 'Salvar'}
            </Button>
          </DialogActions>
        </form>
      </Dialog>
    </Box>
  );
};

export default MaintenanceSchedules;
</file>

<file path="src/pages/MaintenanceTypes.tsx">
// frontend/src/pages/MaintenanceTypes.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Alert,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  FormControlLabel,
  Switch,
  CircularProgress,
  Card,
  CardContent,
  Grid
} from '@mui/material';
import { Add, Edit, Delete, Build, Star, StarBorder } from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import type { MaintenanceType, CreateMaintenanceTypeData, UpdateMaintenanceTypeData } from '../types';
import { maintenanceTypeService } from '../services/api';

const MaintenanceTypes: React.FC = () => {
  const { t } = useTranslation();

  // Estados
  const [types, setTypes] = useState<MaintenanceType[]>([]);
  const [loading, setLoading] = useState(true);
  const [formOpen, setFormOpen] = useState(false);
  const [editingType, setEditingType] = useState<MaintenanceType | null>(null);
  const [submitting, setSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [stats, setStats] = useState<any>(null);

  // Form data
  const [formData, setFormData] = useState<CreateMaintenanceTypeData>({
    name: '',
    description: '',
    is_default: false
  });

  // Carregar tipos de manutenção
  const loadMaintenanceTypes = async () => {
    try {
      setLoading(true);
      const [typesResponse, statsResponse] = await Promise.all([
        maintenanceTypeService.getAll(),
        maintenanceTypeService.getStats()
      ]);
      setTypes(typesResponse.maintenanceTypes);
      setStats(statsResponse.stats);
      setError('');
    } catch (error: any) {
      console.error('Erro ao carregar tipos de manutenção:', error);
      setError('Erro ao carregar tipos de manutenção');
    } finally {
      setLoading(false);
    }
  };

  // Carregar dados na montagem
  useEffect(() => {
    loadMaintenanceTypes();
  }, []);

  // Handlers do formulário
  const handleAddType = () => {
    setEditingType(null);
    setFormData({ name: '', description: '', is_default: false });
    setFormOpen(true);
  };

  const handleEditType = (type: MaintenanceType) => {
    setEditingType(type);
    setFormData({
      name: type.name,
      description: type.description || '',
      is_default: type.is_default
    });
    setFormOpen(true);
  };

  const handleFormClose = () => {
    setFormOpen(false);
    setEditingType(null);
    setFormData({ name: '', description: '', is_default: false });
  };

  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!formData.name.trim()) {
      setError('Nome é obrigatório');
      return;
    }

    try {
      setSubmitting(true);
      setError('');

      const submitData = {
        name: formData.name.trim(),
        ...(formData.description && { description: formData.description.trim() }),
        is_default: formData.is_default
      };

      if (editingType) {
        await maintenanceTypeService.update(editingType.id!, submitData);
        setSuccess('Tipo de manutenção atualizado com sucesso!');
      } else {
        await maintenanceTypeService.create(submitData);
        setSuccess('Tipo de manutenção criado com sucesso!');
      }

      await loadMaintenanceTypes();
      handleFormClose();
    } catch (error: any) {
      console.error('Erro ao salvar tipo:', error);
      setError(error.response?.data?.message || 'Erro ao salvar tipo de manutenção');
    } finally {
      setSubmitting(false);
    }
  };

  const handleDelete = async (type: MaintenanceType) => {
    if (type.is_default) {
      setError('Tipos de manutenção padrão não podem ser removidos');
      return;
    }

    if (window.confirm(`Tem certeza que deseja remover "${type.name}"?`)) {
      try {
        await maintenanceTypeService.delete(type.id!);
        setSuccess('Tipo de manutenção removido com sucesso!');
        await loadMaintenanceTypes();
      } catch (error: any) {
        console.error('Erro ao deletar tipo:', error);
        setError(error.response?.data?.message || 'Erro ao remover tipo de manutenção');
      }
    }
  };

  const handleCreateDefaults = async () => {
    try {
      setSubmitting(true);
      await maintenanceTypeService.createDefaults();
      setSuccess('Tipos de manutenção padrão criados com sucesso!');
      await loadMaintenanceTypes();
    } catch (error: any) {
      console.error('Erro ao criar tipos padrão:', error);
      setError(error.response?.data?.message || 'Erro ao criar tipos padrão');
    } finally {
      setSubmitting(false);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('pt-BR');
  };

  return (
    <Box>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Box>
          <Typography variant="h4" component="h1" fontWeight="bold">
            {t('maintenance.types.title')}
          </Typography>
          <Typography variant="body1" color="text.secondary" sx={{ mt: 1 }}>
            Gerencie os tipos de manutenção para seus ativos
          </Typography>
        </Box>
        <Box sx={{ display: 'flex', gap: 1 }}>
          {stats && stats.total === 0 && (
            <Button
              variant="outlined"
              startIcon={<Star />}
              onClick={handleCreateDefaults}
              disabled={submitting}
            >
              Criar Tipos Padrão
            </Button>
          )}
          <Button
            variant="contained"
            startIcon={<Add />}
            onClick={handleAddType}
            size="large"
          >
            {t('maintenance.types.add')}
          </Button>
        </Box>
      </Box>

      {/* Estatísticas */}
      {stats && (
        <Grid container spacing={3} sx={{ mb: 3 }}>
          <Grid item xs={12} sm={4}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  Total de Tipos
                </Typography>
                <Typography variant="h4" component="div" fontWeight="bold">
                  {stats.total}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={4}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  Tipos Padrão
                </Typography>
                <Typography variant="h4" component="div" fontWeight="bold">
                  {stats.defaults}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
          <Grid item xs={12} sm={4}>
            <Card>
              <CardContent>
                <Typography color="text.secondary" gutterBottom>
                  Tipos Customizados
                </Typography>
                <Typography variant="h4" component="div" fontWeight="bold">
                  {stats.custom}
                </Typography>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      )}

      {/* Alertas */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      {success && (
        <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccess('')}>
          {success}
        </Alert>
      )}

      {/* Tabela de Tipos */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell><strong>Nome</strong></TableCell>
              <TableCell><strong>Descrição</strong></TableCell>
              <TableCell><strong>Tipo</strong></TableCell>
              <TableCell><strong>Criado em</strong></TableCell>
              <TableCell><strong>Ações</strong></TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell colSpan={5} sx={{ textAlign: 'center', py: 4 }}>
                  <CircularProgress />
                </TableCell>
              </TableRow>
            ) : types.length === 0 ? (
              <TableRow>
                <TableCell colSpan={5} sx={{ textAlign: 'center', py: 4 }}>
                  <Box sx={{ textAlign: 'center' }}>
                    <Build sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
                    <Typography variant="h6" color="text.secondary">
                      Nenhum tipo de manutenção cadastrado
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                      Comece criando tipos padrão ou adicione seus próprios tipos
                    </Typography>
                    <Button
                      variant="contained"
                      startIcon={<Star />}
                      onClick={handleCreateDefaults}
                      disabled={submitting}
                    >
                      Criar Tipos Padrão
                    </Button>
                  </Box>
                </TableCell>
              </TableRow>
            ) : (
              types.map((type) => (
                <TableRow key={type.id}>
                  <TableCell>
                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                      {type.is_default ? <Star color="primary" /> : <StarBorder />}
                      {type.name}
                    </Box>
                  </TableCell>
                  <TableCell>{type.description || '-'}</TableCell>
                  <TableCell>
                    <Chip
                      label={type.is_default ? 'Padrão' : 'Customizado'}
                      color={type.is_default ? 'primary' : 'default'}
                      size="small"
                    />
                  </TableCell>
                  <TableCell>{formatDate(type.created_at!)}</TableCell>
                  <TableCell>
                    <IconButton onClick={() => handleEditType(type)} color="primary">
                      <Edit />
                    </IconButton>
                    {!type.is_default && (
                      <IconButton onClick={() => handleDelete(type)} color="error">
                        <Delete />
                      </IconButton>
                    )}
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Dialog do Formulário */}
      <Dialog open={formOpen} onClose={handleFormClose} maxWidth="sm" fullWidth>
        <form onSubmit={handleFormSubmit}>
          <DialogTitle>
            {editingType ? t('maintenance.types.edit') : t('maintenance.types.add')}
          </DialogTitle>

          <DialogContent>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
              <TextField
                label="Nome *"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                fullWidth
                required
                disabled={submitting}
                placeholder="Ex: Troca de óleo"
              />

              <TextField
                label="Descrição"
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                multiline
                rows={3}
                fullWidth
                disabled={submitting}
                placeholder="Descreva este tipo de manutenção..."
              />

              <FormControlLabel
                control={
                  <Switch
                    checked={formData.is_default}
                    onChange={(e) => setFormData({ ...formData, is_default: e.target.checked })}
                    disabled={submitting}
                  />
                }
                label="Tipo padrão"
              />
            </Box>
          </DialogContent>

          <DialogActions>
            <Button onClick={handleFormClose} disabled={submitting}>
              {t('common.cancel')}
            </Button>
            <Button type="submit" variant="contained" disabled={submitting}>
              {submitting ? t('common.loading') : t('common.save')}
            </Button>
          </DialogActions>
        </form>
      </Dialog>
    </Box>
  );
};

export default MaintenanceTypes;
</file>

<file path="src/pages/Register.tsx">
// frontend/src/pages/Register.tsx
import React, { useState } from 'react';
import {
  Box,
  Paper,
  TextField,
  Button,
  Typography,
  Link,
  Alert,
  Container
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { Link as RouterLink, useNavigate } from 'react-router-dom';
import { authService } from '../services/api';

const Register: React.FC = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleChange = (field: keyof typeof formData) => (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setFormData(prev => ({
      ...prev,
      [field]: event.target.value
    }));
    if (error) setError('');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Validações
    if (!formData.name || !formData.email || !formData.password) {
      setError('Por favor, preencha todos os campos');
      return;
    }

    if (formData.password !== formData.confirmPassword) {
      setError('As senhas não coincidem');
      return;
    }

    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      return;
    }

    try {
      setLoading(true);
      setError('');

      const response = await authService.register(
        formData.name,
        formData.email,
        formData.password
      );

      // Salvar dados no localStorage
      localStorage.setItem('token', response.token);
      localStorage.setItem('user', JSON.stringify(response.user));

      // Redirecionar para dashboard
      navigate('/');
    } catch (error: any) {
      console.error('Erro no cadastro:', error);
      const message = error.response?.data?.message || 'Erro ao fazer cadastro';
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box
      sx={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        bgcolor: 'background.default',
        p: 2
      }}
    >
      <Container component="main" maxWidth="sm">
        <Paper elevation={3} sx={{ padding: 4, width: '100%' }}>
          <Box sx={{ textAlign: 'center', mb: 3 }}>
            <Typography component="h1" variant="h4" fontWeight="bold">
              {t('auth.register')}
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              Criar nova conta
            </Typography>
          </Box>

          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}

          <Box component="form" onSubmit={handleSubmit}>
            <TextField
              margin="normal"
              required
              fullWidth
              id="name"
              label={t('auth.name')}
              name="name"
              autoComplete="name"
              autoFocus
              value={formData.name}
              onChange={handleChange('name')}
              disabled={loading}
            />

            <TextField
              margin="normal"
              required
              fullWidth
              id="email"
              label={t('auth.email')}
              name="email"
              autoComplete="email"
              value={formData.email}
              onChange={handleChange('email')}
              disabled={loading}
            />

            <TextField
              margin="normal"
              required
              fullWidth
              name="password"
              label={t('auth.password')}
              type="password"
              id="password"
              autoComplete="new-password"
              value={formData.password}
              onChange={handleChange('password')}
              disabled={loading}
            />

            <TextField
              margin="normal"
              required
              fullWidth
              name="confirmPassword"
              label={t('auth.confirmPassword')}
              type="password"
              id="confirmPassword"
              autoComplete="new-password"
              value={formData.confirmPassword}
              onChange={handleChange('confirmPassword')}
              disabled={loading}
            />

            <Button
              type="submit"
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
              disabled={loading}
              size="large"
            >
              {loading ? t('common.loading') : t('auth.register')}
            </Button>

            <Box sx={{ textAlign: 'center', mt: 2 }}>
              <Typography variant="body2">
                {t('auth.hasAccount')}{' '}
                <Link component={RouterLink} to="/login">
                  {t('auth.login')}
                </Link>
              </Typography>
            </Box>
          </Box>
        </Paper>
      </Container>
    </Box>
  );
};

export default Register;
</file>

<file path="src/pages/ResetPassword.tsx">
// frontend/src/pages/ResetPassword.tsx
import React, { useState, useEffect } from 'react';
import {
  Box,
  Paper,
  TextField,
  Button,
  Typography,
  Link,
  Alert,
  Container
} from '@mui/material';
import { useTranslation } from 'react-i18next';
import { Link as RouterLink, useParams, useNavigate } from 'react-router-dom';
import { authService } from '../services/api';

const ResetPassword: React.FC = () => {
  const { t } = useTranslation();
  const { token } = useParams<{ token: string }>();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    password: '',
    confirmPassword: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  // Verificar se tem token
  useEffect(() => {
    if (!token) {
      setError('Token de recuperação inválido');
    }
  }, [token]);

  const handleChange = (field: 'password' | 'confirmPassword') => (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setFormData(prev => ({
      ...prev,
      [field]: event.target.value
    }));
    if (error) setError('');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!token) {
      setError('Token de recuperação inválido');
      return;
    }

    if (!formData.password || !formData.confirmPassword) {
      setError('Por favor, preencha todos os campos');
      return;
    }

    if (formData.password !== formData.confirmPassword) {
      setError('As senhas não coincidem');
      return;
    }

    if (formData.password.length < 6) {
      setError('A senha deve ter pelo menos 6 caracteres');
      return;
    }

    try {
      setLoading(true);
      setError('');

      await authService.resetPassword(token, formData.password);
      setSuccess(true);

      // Redirecionar para login após 3 segundos
      setTimeout(() => {
        navigate('/login');
      }, 3000);
    } catch (error: any) {
      console.error('Erro ao redefinir senha:', error);
      const message = error.response?.data?.message || 'Erro ao redefinir senha';
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return (
      <Container component="main" maxWidth="sm">
        <Box
          sx={{
            minHeight: '100vh',
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center',
          }}
        >
          <Paper elevation={3} sx={{ padding: 4, width: '100%' }}>
            <Box sx={{ textAlign: 'center' }}>
              <Typography component="h1" variant="h4" fontWeight="bold" sx={{ mb: 2 }}>
                Senha redefinida!
              </Typography>

              <Alert severity="success" sx={{ mb: 3 }}>
                Sua senha foi alterada com sucesso.
              </Alert>

              <Typography variant="body1" sx={{ mb: 3 }}>
                Você será redirecionado para o login em alguns segundos...
              </Typography>

              <Button
                component={RouterLink}
                to="/login"
                variant="contained"
                size="large"
                fullWidth
              >
                Ir para Login
              </Button>
            </Box>
          </Paper>
        </Box>
      </Container>
    );
  }

  return (
    <Container component="main" maxWidth="sm">
      <Box
        sx={{
          minHeight: '100vh',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
        }}
      >
        <Paper elevation={3} sx={{ padding: 4, width: '100%' }}>
          <Box sx={{ textAlign: 'center', mb: 3 }}>
            <Typography component="h1" variant="h4" fontWeight="bold">
              {t('auth.resetPassword')}
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              Digite sua nova senha
            </Typography>
          </Box>

          {error && (
            <Alert severity="error" sx={{ mb: 2 }}>
              {error}
            </Alert>
          )}

          <Box component="form" onSubmit={handleSubmit}>
            <TextField
              margin="normal"
              required
              fullWidth
              name="password"
              label="Nova senha"
              type="password"
              id="password"
              autoComplete="new-password"
              autoFocus
              value={formData.password}
              onChange={handleChange('password')}
              disabled={loading}
            />

            <TextField
              margin="normal"
              required
              fullWidth
              name="confirmPassword"
              label="Confirmar nova senha"
              type="password"
              id="confirmPassword"
              autoComplete="new-password"
              value={formData.confirmPassword}
              onChange={handleChange('confirmPassword')}
              disabled={loading}
            />

            <Button
              type="submit"
              fullWidth
              variant="contained"
              sx={{ mt: 3, mb: 2 }}
              disabled={loading || !formData.password || !formData.confirmPassword}
              size="large"
            >
              {loading ? t('common.loading') : 'Redefinir senha'}
            </Button>

            <Box sx={{ textAlign: 'center', mt: 2 }}>
              <Typography variant="body2">
                Lembrou da senha?{' '}
                <Link component={RouterLink} to="/login">
                  {t('auth.login')}
                </Link>
              </Typography>
            </Box>
          </Box>
        </Paper>
      </Box>
    </Container>
  );
};

export default ResetPassword;
</file>

<file path="src/services/api.ts">
// frontend/src/services/api.ts
import axios from 'axios';
import type {
  AuthResponse,
  AssetsResponse,
  AssetResponse,
  StatsResponse,
  CreateAssetData,
  UpdateAssetData,
  MaintenanceTypesResponse,
  MaintenanceTypeResponse,
  CreateMaintenanceTypeData,
  UpdateMaintenanceTypeData,
  MaintenanceRecordsResponse,
  MaintenanceRecordResponse,
  CreateMaintenanceRecordData,
  UpdateMaintenanceRecordData,
  MaintenanceSchedulesResponse,
  MaintenanceScheduleResponse,
  CreateMaintenanceScheduleData,
  UpdateMaintenanceScheduleData
} from '../types';

// Configurar URL base da API
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';

// Criar instância do axios
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para adicionar token nas requisições
api.interceptors.request.use((config) => {
  const token = localStorage.getItem('token');
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Interceptor para tratar erros de autenticação
api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Token expirado ou inválido
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

// Serviços de autenticação
export const authService = {
  async login(email: string, password: string): Promise<AuthResponse> {
    const response = await api.post('/auth/login', { email, password });
    return response.data;
  },

  async register(name: string, email: string, password: string): Promise<AuthResponse> {
    const response = await api.post('/auth/register', { name, email, password });
    return response.data;
  },

  async forgotPassword(email: string): Promise<{ message: string }> {
    const response = await api.post('/auth/forgot-password', { email });
    return response.data;
  },

  async resetPassword(token: string, password: string): Promise<{ message: string }> {
    const response = await api.post('/auth/reset-password', { token, password });
    return response.data;
  },

  async getProfile(): Promise<{ user: any }> {
    const response = await api.get('/auth/profile');
    return response.data;
  }
};

// Serviços de ativos
export const assetService = {
  async getAll(): Promise<AssetsResponse> {
    const response = await api.get('/assets');
    return response.data;
  },

  async getById(id: number): Promise<AssetResponse> {
    const response = await api.get(`/assets/${id}`);
    return response.data;
  },

  async create(assetData: CreateAssetData): Promise<AssetResponse> {
    const response = await api.post('/assets', assetData);
    return response.data;
  },

  async update(id: number, assetData: UpdateAssetData): Promise<AssetResponse> {
    const response = await api.put(`/assets/${id}`, assetData);
    return response.data;
  },

  async delete(id: number): Promise<{ message: string }> {
    const response = await api.delete(`/assets/${id}`);
    return response.data;
  },

  async getStats(): Promise<StatsResponse> {
    const response = await api.get('/assets/stats');
    return response.data;
  }
};

// Serviços de tipos de manutenção
export const maintenanceTypeService = {
  async getAll(): Promise<MaintenanceTypesResponse> {
    const response = await api.get('/maintenance-types');
    return response.data;
  },

  async getById(id: number): Promise<MaintenanceTypeResponse> {
    const response = await api.get(`/maintenance-types/${id}`);
    return response.data;
  },

  async create(data: CreateMaintenanceTypeData): Promise<MaintenanceTypeResponse> {
    const response = await api.post('/maintenance-types', data);
    return response.data;
  },

  async update(id: number, data: UpdateMaintenanceTypeData): Promise<MaintenanceTypeResponse> {
    const response = await api.put(`/maintenance-types/${id}`, data);
    return response.data;
  },

  async delete(id: number): Promise<{ message: string }> {
    const response = await api.delete(`/maintenance-types/${id}`);
    return response.data;
  },

  async getStats(): Promise<{ stats: any }> {
    const response = await api.get('/maintenance-types/stats');
    return response.data;
  },

  async createDefaults(): Promise<MaintenanceTypesResponse> {
    const response = await api.post('/maintenance-types/create-defaults');
    return response.data;
  }
};

// Serviços de registros de manutenção
export const maintenanceRecordService = {
  async getAll(): Promise<MaintenanceRecordsResponse> {
    const response = await api.get('/maintenance-records');
    return response.data;
  },

  async getById(id: number): Promise<MaintenanceRecordResponse> {
    const response = await api.get(`/maintenance-records/${id}`);
    return response.data;
  },

  async getByAsset(assetId: number): Promise<MaintenanceRecordsResponse> {
    const response = await api.get(`/maintenance-records/asset/${assetId}`);
    return response.data;
  },

  async getByType(typeId: number): Promise<MaintenanceRecordsResponse> {
    const response = await api.get(`/maintenance-records/type/${typeId}`);
    return response.data;
  },

  async getRecent(limit: number = 10): Promise<MaintenanceRecordsResponse> {
    const response = await api.get(`/maintenance-records/recent?limit=${limit}`);
    return response.data;
  },

  async getByDateRange(startDate: string, endDate: string): Promise<MaintenanceRecordsResponse> {
    const response = await api.get(`/maintenance-records/date-range?startDate=${startDate}&endDate=${endDate}`);
    return response.data;
  },

  async create(data: CreateMaintenanceRecordData): Promise<MaintenanceRecordResponse> {
    const response = await api.post('/maintenance-records', data);
    return response.data;
  },

  async update(id: number, data: UpdateMaintenanceRecordData): Promise<MaintenanceRecordResponse> {
    const response = await api.put(`/maintenance-records/${id}`, data);
    return response.data;
  },

  async delete(id: number): Promise<{ message: string }> {
    const response = await api.delete(`/maintenance-records/${id}`);
    return response.data;
  },

  async getStats(): Promise<{ stats: any }> {
    const response = await api.get('/maintenance-records/stats');
    return response.data;
  }
};

// Serviços de agendamentos de manutenção
export const maintenanceScheduleService = {
  async getAll(): Promise<MaintenanceSchedulesResponse> {
    const response = await api.get('/maintenance-schedules');
    return response.data;
  },

  async getById(id: number): Promise<MaintenanceScheduleResponse> {
    const response = await api.get(`/maintenance-schedules/${id}`);
    return response.data;
  },

  async getByAsset(assetId: number): Promise<MaintenanceSchedulesResponse> {
    const response = await api.get(`/maintenance-schedules/asset/${assetId}`);
    return response.data;
  },

  async getUpcoming(days: number = 7): Promise<MaintenanceSchedulesResponse> {
    const response = await api.get(`/maintenance-schedules/upcoming?days=${days}`);
    return response.data;
  },

  async getOverdue(): Promise<MaintenanceSchedulesResponse> {
    const response = await api.get('/maintenance-schedules/overdue');
    return response.data;
  },

  async create(data: CreateMaintenanceScheduleData): Promise<MaintenanceScheduleResponse> {
    const response = await api.post('/maintenance-schedules', data);
    return response.data;
  },

  async update(id: number, data: UpdateMaintenanceScheduleData): Promise<MaintenanceScheduleResponse> {
    const response = await api.put(`/maintenance-schedules/${id}`, data);
    return response.data;
  },

  async delete(id: number): Promise<{ message: string }> {
    const response = await api.delete(`/maintenance-schedules/${id}`);
    return response.data;
  },

  async markCompleted(id: number, recordId: number): Promise<MaintenanceScheduleResponse> {
    const response = await api.post(`/maintenance-schedules/${id}/complete`, { recordId });
    return response.data;
  },

  async getStats(): Promise<{ stats: any }> {
    const response = await api.get('/maintenance-schedules/stats');
    return response.data;
  }
};

export default api;
</file>

<file path="src/theme/index.ts">
import { createTheme } from '@mui/material/styles';
import type { PaletteMode } from '@mui/material';

export const getTheme = (mode: PaletteMode) => createTheme({
  palette: {
    mode,
    ...(mode === 'light'
      ? {
        // Paleta modo claro
        primary: {
          main: '#1976d2',
        },
        secondary: {
          main: '#dc004e',
        },
        background: {
          default: '#f5f5f5',
          paper: '#ffffff',
        },
      }
      : {
        // Paleta modo escuro
        primary: {
          main: '#90caf9',
        },
        secondary: {
          main: '#f48fb1',
        },
        background: {
          default: '#121212',
          paper: '#1e1e1e',
        },
      }),
  },
});
</file>

<file path="src/types/index.ts">
// frontend/src/types/index.ts

export interface User {
  id: number;
  name: string;
  email: string;
  created_at: string;
  updated_at: string;
}

export interface Asset {
  id: number;
  user_id: number;
  name: string;
  description?: string;
  location?: string;
  status: 'active' | 'inactive' | 'maintenance';
  created_at: string;
  updated_at: string;
}

export interface CreateAssetData {
  name: string;
  description?: string;
  location?: string;
  status?: 'active' | 'inactive' | 'maintenance';
}

export interface UpdateAssetData {
  name?: string;
  description?: string;
  location?: string;
  status?: 'active' | 'inactive' | 'maintenance';
}

export interface AssetStats {
  total: number;
  active: number;
  inactive: number;
  maintenance: number;
}

// Tipos de Manutenção
export interface MaintenanceType {
  id?: number;
  user_id: number;
  name: string;
  description?: string;
  is_default: boolean;
  created_at?: string;
  updated_at?: string;
}

export interface CreateMaintenanceTypeData {
  name: string;
  description?: string;
  is_default?: boolean;
}

export interface UpdateMaintenanceTypeData {
  name?: string;
  description?: string;
  is_default?: boolean;
}

// Registros de Manutenção
export interface MaintenanceRecord {
  id?: number;
  asset_id: number;
  maintenance_type_id?: number;
  date_performed: string;
  notes?: string;
  cost?: number;
  created_at?: string;
  updated_at?: string;
  // Campos extras para joins
  asset_name?: string;
  maintenance_type_name?: string;
}

export interface CreateMaintenanceRecordData {
  asset_id: number;
  maintenance_type_id?: number;
  date_performed: string;
  notes?: string;
  cost?: number;
}

export interface UpdateMaintenanceRecordData {
  maintenance_type_id?: number | null;
  date_performed?: string;
  notes?: string | null;
  cost?: number | null;
}

// Agendamentos de Manutenção
export interface MaintenanceSchedule {
  id?: number;
  asset_id: number;
  maintenance_type_id?: number;
  based_on_record_id?: number;
  scheduled_date: string;
  status: 'pending' | 'completed' | 'overdue';
  frequency_type: 'days' | 'weeks' | 'months' | 'kilometers' | 'hours';
  frequency_value: number;
  created_at?: string;
  updated_at?: string;
  // Campos extras para joins
  asset_name?: string;
  maintenance_type_name?: string;
  last_maintenance_date?: string;
}

export interface CreateMaintenanceScheduleData {
  asset_id: number;
  maintenance_type_id?: number;
  based_on_record_id?: number;
  frequency_type: 'days' | 'weeks' | 'months' | 'kilometers' | 'hours';
  frequency_value: number;
  scheduled_date?: string;
}

export interface UpdateMaintenanceScheduleData {
  scheduled_date?: string;
  status?: 'pending' | 'completed' | 'overdue';
  frequency_type?: 'days' | 'weeks' | 'months' | 'kilometers' | 'hours';
  frequency_value?: number;
}

// Respostas da API
export interface ApiResponse<T> {
  message?: string;
  data?: T;
  error?: string;
}

export interface AuthResponse {
  user: User;
  token: string;
}

export interface AssetsResponse {
  assets: Asset[];
  total: number;
}

export interface AssetResponse {
  asset: Asset;
}

export interface StatsResponse {
  stats: AssetStats;
}

export interface MaintenanceTypesResponse {
  maintenanceTypes: MaintenanceType[];
  total: number;
}

export interface MaintenanceTypeResponse {
  maintenanceType: MaintenanceType;
}

export interface MaintenanceRecordsResponse {
  maintenanceRecords: MaintenanceRecord[];
  total: number;
}

export interface MaintenanceRecordResponse {
  maintenanceRecord: MaintenanceRecord;
}

export interface MaintenanceSchedulesResponse {
  schedules: MaintenanceSchedule[];
  total: number;
}

export interface MaintenanceScheduleResponse {
  schedule: MaintenanceSchedule;
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": [
      "ES2020",
      "DOM",
      "DOM.Iterable"
    ],
    "module": "ESNext",
    "skipLibCheck": true,
    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": [
    "src"
  ]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:3001',
        changeOrigin: true,
      }
    }
  }
})
</file>

</files>
